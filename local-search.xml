<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker容器迁移踩坑日记</title>
    <link href="/2022/06/16/docker%E5%AE%B9%E5%99%A8%E8%BF%81%E7%A7%BB%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/06/16/docker%E5%AE%B9%E5%99%A8%E8%BF%81%E7%A7%BB%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>被领导要求部署一个和测试环境一样的演示环境，并且数据库也要同步过去，服务器上的各种服务都是docker部署的，由于之前docker玩的比较少，所以还是踩了不少坑的，在此记录一下正确的操作方法。</p><h2 id="正文">正文</h2><h3 id="1-容器镜像导出">1.容器镜像导出</h3><ul><li>我们先通过<code>docker images</code>查看需要导出的镜像</li></ul><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206171124984.png" alt="镜像列表"></p><ul><li>然后我们使用镜像导出命令</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker save -o <span class="hljs-regexp">/home/</span>备份包名.tar 镜像id或镜像名（可以多个，空格分隔）<br><br>-o(即output) 或 &gt; 表示输出到文件<br></code></pre></td></tr></table></figure><ul><li>例如我需要同时备份两个镜像：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save -o /home/backup/back.tar nginx java<br></code></pre></td></tr></table></figure><p><strong>备份完成之后可以在目录下查看到这个备份文件</strong></p><h3 id="2-备份文件迁移">2.备份文件迁移</h3><ul><li>迁移文件可以使用u盘传输，当然用u盘转移时间显然很慢，我们何不直接在两台服务器之间进行传输？如果再局域网的情况下传输速度会非常快，这里我们使用scp指令去复制备份文件：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">scp <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[原路径]</span> <span class="hljs-selector-attr">[目标路径]</span><br><br>命令参数：<br>-<span class="hljs-selector-tag">p</span> 保留原文件的修改时间，访问时间和访问权限<br>-<span class="hljs-selector-tag">q</span> 不显示传输进度条<br>-r 递归复制整个目录。<br>-v 详细方式显示输出。<br>-<span class="hljs-selector-tag">P</span> port 注意是大写的<span class="hljs-selector-tag">P</span>, port是指定数据传输用到的端口号<br></code></pre></td></tr></table></figure><ul><li>在我们需要迁移的目标机器上执行指令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#192.168.1.79是我们备份文件所在的服务器，我想把文件移动到本地home下</span><br>scp root@192.168.1.79:/home/back.tar /home/<br></code></pre></td></tr></table></figure><ul><li>回车之后会提示是否输入密码，先yes然后输入密码，输入一下root密码即可，如果你是非root用户，可能要注意下文件权限问题</li></ul><h3 id="3-镜像备份文件读取">3.镜像备份文件读取</h3><ul><li>使用docker load载入镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i /home/back.tar<br><span class="hljs-comment">#-i(即input)或&lt;表示从文件输入；</span><br></code></pre></td></tr></table></figure><ul><li>等待读条完毕，使用<code>docker images</code>查看食肉导入成功，导入成功即可根据镜像创建容器并运行。</li></ul><h3 id="4-docker容器迁移">4.docker容器迁移</h3><ul><li>如果迁移后的容器的配置也想要一样的话，也可以把docker容器迁移过来，迁移的步骤和前三步一致，这里不再赘述</li></ul><h4 id="4-1-docker容器的导出">4.1 docker容器的导出</h4><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">export</span> [options] container<br></code></pre></td></tr></table></figure><p>使用命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">export</span> -o /home/econtainer.tar 0a64dafa5db9<br></code></pre></td></tr></table></figure><p>解释：</p><p>​-o表示输出到文件；</p><p>​/home/econtainer.tar指定导出的位置路径；</p><p>​0a64dafa5db9为容器id;</p><h4 id="4-2-docker容器的导入">4.2 docker容器的导入</h4><p>首先需要使用xftp或其他工具将上面的.tar文件上传到需要导入镜像的服务器中。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker import [options] file|url| -[repository[:tag]]<br></code></pre></td></tr></table></figure><p>使用命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker import econtainer.tar epower:latest<br></code></pre></td></tr></table></figure><p>解释：</p><p>​econtainer.tar表示导入的容器；</p><p>​epower:latest表示给导入后的镜像进行重命名，latest表示给导入的镜像打tag;</p><p>​使用docker images命令可以查看是否导入成功，导入成功就可以根据镜像运行容器；</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows V2rayN直连or代理规则配置教程</title>
    <link href="/2022/06/16/Windows-V2rayN%E7%9B%B4%E8%BF%9Eor%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2022/06/16/Windows-V2rayN%E7%9B%B4%E8%BF%9Eor%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>V2rayN 在更新以后移除了 PAC 规则模式，很多人被迫要么使用全局代理要么关闭代理，但其实规则模式只是通过另外一种方式呈现在了 V2rayN 里。</p><h2 id="教程">教程</h2><h3 id="1-打开V2rayN面板，找到设置–路由设置">1.打开V2rayN面板，找到设置–路由设置</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161041896.png" alt=""></p><h3 id="2-添加代理-直连-组织的域名">2.添加代理/直连/组织的域名</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161046462.png" alt=""></p><h4 id="配置规则">配置规则:</h4><blockquote><p><strong>建议先添加 geoip:cn 和 geosite:cn，然后再以 domain:xxx.com 的形式添加特别网站。</strong><br><strong>(添加完 geoip:cn 和 geosite:cn 以后基本上所有中国大陆的网站都会直连)</strong><br><strong>geosite:category-ads：包含了常见的广告域名。</strong><br><strong>geosite:category-ads-all：包含了常见的广告域名，以及广告提供商的域名。</strong><br><strong>geoip:apple：包含了 Apple 旗下绝大部分域名。</strong><br><strong>geoip:google：包含了 Google 旗下绝大部分域名。</strong><br><strong>geoip:microsoft：包含了 Microsoft 旗下绝大部分域名。</strong><br><strong>geoip:facebook：包含了 Facebook 旗下绝大部分域名。</strong><br><strong>geoip:twitter：包含了 Twitter 旗下绝大部分域名。</strong><br><strong>geoip:telegram：包含了 Telegram 旗下绝大部分域名。</strong></p></blockquote><ul><li>如果你使用的局域网屏蔽了一些你想上的网站，你也可以使用这个功能解除限制，当然需要把想上的网站配置进代理配置中</li></ul><h3 id="3-如果你启用了路由高级功能，想要配置不同模式下的代理规则，也是可以的，如果你不使用高级功能，可以跳过这一步">3.如果你启用了路由高级功能，想要配置不同模式下的代理规则，也是可以的，如果你不使用高级功能，可以跳过这一步</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161054968.png" alt=""></p><p><strong>每一项代表一个规则集，你可以右击新建规则集去定制化，双击规则集配置规则:</strong></p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161056889.png" alt=""></p><p><strong>proxy代表代理，direct代表直连，block代表阻止</strong></p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161057110.png" alt="因为公司内网屏蔽额这些站点（恼），我就让这些站点走了代理"></p><p><strong>配置完只需要一路确定，然后在托盘菜单的路由中选择自己定制化的规则集即可</strong></p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161101779.png" alt=""></p><h3 id="4-检查是否生效">4.检查是否生效</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161102614.png" alt=""></p><p><strong>查看日志，会发现有些域名代理了，有些域名屏蔽了，有些域名直连了，那就是设置成功了。</strong></p><p>参考文章：</p><p><a href="https://hasefukashi.in/v2rayrule/">Windows V2rayN 如何设置 直连or代理 规则？ - Hase測評 (hasefukashi.in)</a></p>]]></content>
    
    
    <categories>
      
      <category>VPN技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>v2ray</tag>
      
      <tag>v2rayN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器时间不同步导致在java应用中获取的时间不正确问题</title>
    <link href="/2022/06/10/docker%E5%AE%B9%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E5%AF%BC%E8%87%B4%E5%9C%A8java%E5%BA%94%E7%94%A8%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E6%AD%A3%E7%A1%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/10/docker%E5%AE%B9%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E5%AF%BC%E8%87%B4%E5%9C%A8java%E5%BA%94%E7%94%A8%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E6%AD%A3%E7%A1%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在把Java应用部署到docker容器时，发现应用获取到的时间和现实时间相差了8个小时，会导致一系列不必要的麻烦。</p><h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><h4 id="1、首选需要确保宿主机的时区和时间的准确"><a href="#1、首选需要确保宿主机的时区和时间的准确" class="headerlink" title="1、首选需要确保宿主机的时区和时间的准确"></a>1、首选需要确保宿主机的时区和时间的准确</h4><p>现在宿主机上用 date -R 看一下时区是否为东八区（末尾有+0800）</p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220610112000077.png"></p><h4 id="2、若宿主机时区或者时间不准确，可以用date-x2F-ntpdate和tzdata同步一下时间以及更改时区"><a href="#2、若宿主机时区或者时间不准确，可以用date-x2F-ntpdate和tzdata同步一下时间以及更改时区" class="headerlink" title="2、若宿主机时区或者时间不准确，可以用date&#x2F;ntpdate和tzdata同步一下时间以及更改时区"></a>2、若宿主机时区或者时间不准确，可以用date&#x2F;ntpdate和tzdata同步一下时间以及更改时区</h4><h5 id="date命令："><a href="#date命令：" class="headerlink" title="date命令："></a>date命令：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">date                #查看当前时间，结果如下：2017年 01月 06日 星期五 13:02:55 CST<br>date -s 14:03:35#设置当前时间，结果如下：2017年 01月 06日 星期五 14:03:35 CST<br>date -s 2017-01-08    #设置当前日期，结果如下：2017年 01月 08日 星期五 00:00:00  CST<br></code></pre></td></tr></table></figure><h5 id="ntpdate命令："><a href="#ntpdate命令：" class="headerlink" title="ntpdate命令："></a>ntpdate命令：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ntpdate -u 210.72.145.44   #网络时间同步命令<br></code></pre></td></tr></table></figure><blockquote><p>注意：若不加上-u参数， 会出现以下提示：no server suitable for synchronization found</p><p>-u：从man ntpdate中可以看出-u参数可以越过防火墙与主机同步；</p><p>210.72.145.44：中国国家授时中心的官方服务器。</p></blockquote><h5 id="ntp常用服务器："><a href="#ntp常用服务器：" class="headerlink" title="ntp常用服务器："></a>ntp常用服务器：</h5><p>中国国家授时中心：210.72.145.44</p><p>NTP服务器(上海) ：ntp.api.bz</p><p>经测试中国国家授时中心与NTP上海服务器可以正常同步时间，注意需要加上-u参数！</p><h5 id="时区修改："><a href="#时区修改：" class="headerlink" title="时区修改："></a>时区修改：</h5><p>使用tzselect， 选择到China&#x2F;Shanghai即可</p><p>若显示未安装tzselect，可以安装一下tzdata</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install tzdata #centos<br>apt-get install tzdata #ubuntu<br></code></pre></td></tr></table></figure><h4 id="3、复制宿主机上的zoneinfo文件夹到容器下的-x2F-usr-x2F-share-x2F-目录下。"><a href="#3、复制宿主机上的zoneinfo文件夹到容器下的-x2F-usr-x2F-share-x2F-目录下。" class="headerlink" title="3、复制宿主机上的zoneinfo文件夹到容器下的&#x2F;usr&#x2F;share&#x2F;目录下。"></a>3、复制宿主机上的zoneinfo文件夹到容器下的&#x2F;usr&#x2F;share&#x2F;目录下。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp /usr/share/zoneinfo 容器名称:/usr/share/<br></code></pre></td></tr></table></figure><h4 id="2、进入到容器中"><a href="#2、进入到容器中" class="headerlink" title="2、进入到容器中"></a>2、进入到容器中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it 容器名称 /bin/bash<br></code></pre></td></tr></table></figure><h4 id="3、创建软连接，修改时区。"><a href="#3、创建软连接，修改时区。" class="headerlink" title="3、创建软连接，修改时区。"></a>3、创建软连接，修改时区。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone<br></code></pre></td></tr></table></figure><h4 id="4、查看时间，进行测试。"><a href="#4、查看时间，进行测试。" class="headerlink" title="4、查看时间，进行测试。"></a>4、查看时间，进行测试。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -R<br></code></pre></td></tr></table></figure><p>参考文章:</p><p><a href="https://www.linuxprobe.com/linux-time.html">如何调整Linux系统为正确时区 | 《Linux就该这么学》 (linuxprobe.com)</a></p><p><a href="https://www.csdn.net/tags/MtzaIgwsOTY2ODQtYmxvZwO0O0OO0O0O.html">linux中同步时间的命令是什么 - CSDN</a></p><p><a href="https://blog.csdn.net/tiny_du/article/details/124024562">修改docker的时间_在路上的阿帅的博客-CSDN博客_docker 修改时间</a></p>]]></content>
    
    
    <categories>
      
      <category>Java开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>docker</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sspanel+XrayR后端+tls+nginx反代(含一键脚本) 对接教程</title>
    <link href="/2022/05/17/sspanel+XrayR%E5%90%8E%E7%AB%AF+tls+nginx%E5%8F%8D%E4%BB%A3(%E5%90%AB%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC)%20%E5%AF%B9%E6%8E%A5%E6%95%99%E7%A8%8B/"/>
    <url>/2022/05/17/sspanel+XrayR%E5%90%8E%E7%AB%AF+tls+nginx%E5%8F%8D%E4%BB%A3(%E5%90%AB%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC)%20%E5%AF%B9%E6%8E%A5%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="后端信息"><a href="#后端信息" class="headerlink" title="后端信息"></a>后端信息</h2><p>XrayR后端说明：<a href="https://crackair.gitbook.io/xrayr-project/">https://crackair.gitbook.io/xrayr-project/</a></p><p>XrayR原作者已经删库了, 这里就使用了Misaki No大佬的后续开发脚本</p><p><a href="https://github.com/Misaka-blog/XrayR">https://github.com/Misaka-blog/XrayR</a></p><h2 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h2><p>节点地址：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">IP;监听端口;alterId;(tcp或ws);(tls或不填);path=/xxx|<span class="hljs-type">host</span>=xxxx.com|<span class="hljs-type">server</span>=xxx.com|<span class="hljs-type">outside_port</span>=xxx<br></code></pre></td></tr></table></figure><p>类型：V2Ray</p><h2 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h2><ul><li>安装后端脚本：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -N https://raw.githubusercontents.com/Misaka-blog/XrayR-script/master/install.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure><ul><li>时间同步 (VMess协议对时间同步有要求, 如果用VLESS可以跳过)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y ntp<br>systemctl enable ntpd<br>ntpdate -q 0.rhel.pool.ntp.org<br>systemctl restart ntpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改时区:</span><br>tzselect<br>TZ=&#x27;Asia/Shanghai&#x27;;export TZ<br></code></pre></td></tr></table></figure><ul><li>配置文件 &#x2F;etc&#x2F;XrayR&#x2F;config.yml, 以下为部分修改项</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Nodes:</span><br>  <span class="hljs-bullet">-</span><br>    <span class="hljs-attr">PanelType:</span> <span class="hljs-string">&quot;SSpanel&quot;</span> <span class="hljs-comment"># 面板类型: SSpanel, V2board, PMpanel, Proxypanel</span><br>    <span class="hljs-attr">ApiConfig:</span><br>      <span class="hljs-attr">ApiHost:</span> <span class="hljs-string">&quot;https://xxx.com&quot;</span>  <span class="hljs-comment">#api地址 机场地址</span><br>      <span class="hljs-attr">ApiKey:</span> <span class="hljs-string">&quot;123123&quot;</span><span class="hljs-comment">#apikey 在你网站的config里配置过的</span><br>      <span class="hljs-attr">NodeID:</span> <span class="hljs-number">15</span><span class="hljs-comment">#节点id</span><br>      <span class="hljs-attr">EnableVless:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Enable Vless for V2ray Type vless协议比较快</span><br>    <span class="hljs-attr">ControllerConfig:</span><br>      <span class="hljs-attr">ListenIP:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-comment"># IP address you want to listen 监听ip, 反代需要填</span><br>      <span class="hljs-attr">CertConfig:</span><br>        <span class="hljs-attr">CertMode:</span> <span class="hljs-string">none</span> <span class="hljs-comment">#反代直接关闭 交给后面的脚本申请证书</span><br></code></pre></td></tr></table></figure><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出当前配置文件内容</span><br>xrayr config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动xrayr</span><br>xrayr start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指令向导</span><br>xrayr<br></code></pre></td></tr></table></figure><h2 id="BBR加速"><a href="#BBR加速" class="headerlink" title="BBR加速"></a>BBR加速</h2><p>centos bbr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">功能比较强大</span><br>bash &lt;(curl -Lso- https://git.io/kernel.sh)<br></code></pre></td></tr></table></figure><h2 id="配置反代"><a href="#配置反代" class="headerlink" title="配置反代"></a>配置反代</h2><p>防封, 推荐使用</p><p>使用前先将域名解析到后端节点ip地址</p><p>一键脚本, 运行后选18就行了, 按照提示操作即可, 脚本跑完会给出前端节点配置信息, 需要去节点配置改一下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -sL https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/AuthurNero/</span>soga_nginx<span class="hljs-regexp">/xrayr/</span>xrayr-nginx.sh)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VPN技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sspanel</tag>
      
      <tag>v2ray</tag>
      
      <tag>XrayR</tag>
      
      <tag>nginx</tag>
      
      <tag>反向代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux自动重启配置教程</title>
    <link href="/2022/05/16/Linux%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2022/05/16/Linux%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将时区改成中国</span><br><br>crontab -e <br><br>30 4 * * * /sbin/reboot          <br><span class="hljs-meta prompt_"># </span><span class="language-bash">( 0 1 * * *表示每天凌晨4.30重启.)</span><br><br>0 1 * * 1 /sbin/reboot          <br><span class="hljs-meta prompt_"> # </span><span class="language-bash">(0 1 * * 1表示每周一凌晨一点重启</span><br><br>30 2 * * * /home/bin/oraclebackup.sh   <br><span class="hljs-meta prompt_">#</span><span class="language-bash">（备份数据库和站点目录）</span><br><br>30 3 * * * /home/bin/cmsbackup.sh     <br><span class="hljs-meta prompt_">#</span><span class="language-bash">（备份数据库和站点目录）</span><br><br>crontab -l <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看目前已有的定时任务</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启cron生效</span><br>service crond restart <br><br>/etc/init.d/crond start #启动<br>/etc/init.d/crond stop #关闭<br>/etc/init.d/crond restart #重启<br><span class="hljs-meta prompt_"># </span><span class="language-bash">有的系统可能init.d目录下没有crond，只有cron，其实也一样，只不过把crond换为cron：</span><br>/etc/init.d/cron start  #启动<br>/etc/init.d/cron stop #关闭<br>/etc/init.d/cron restart #重启<br><br>who -b #查看最后一次系统启动的时间。<br><br>who -r #查看当前系统运行时间<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>cron表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
