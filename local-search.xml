<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>阿里云服务器完全卸载云盾教程</title>
    <link href="/2023/09/uninstall-aliyun-shield.html"/>
    <url>/2023/09/uninstall-aliyun-shield.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>阿里云盾（AliYunDun），又名安骑士，是购买阿里云云产品后自带的监控云服务器/轻量应用服务器安全的产品，能够自动化实时入侵威胁检测、病毒查杀、漏洞智能修复、基线一键核查等功能，但是同时也会监控你的服务器是否有违规进程，然后就会收到“阿里云警告邮件”。</p><p>阿里云盾主要包括3个进程：AliYunDun、aliyun-service和AliYunDunUpdate。</p><h3 id="教程">教程</h3><h4 id="1-可以先用以下命令查询一下是否有阿里云盾的进程">1.可以先用以下命令查询一下是否有阿里云盾的进程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps -aux | grep -E <span class="hljs-string">&#x27;aliyun|AliYunDun&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="2-确认存在进程，执行以下指令卸载云盾（官方脚本）">2.确认存在进程，执行以下指令卸载云盾（官方脚本）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://update.aegis.aliyun.com/download/uninstall.sh<br><span class="hljs-built_in">chmod</span> +x uninstall.sh<br>./uninstall.sh<br>wget http://update.aegis.aliyun.com/download/quartz_uninstall.sh<br><span class="hljs-built_in">chmod</span> +x quartz_uninstall.sh<br>./quartz_uninstall.sh<br></code></pre></td></tr></table></figure><h4 id="3-卸载阿里云盾后，执行如下代码删除阿里云盾文件残留">3.卸载阿里云盾后，执行如下代码删除阿里云盾文件残留</h4><blockquote><p>若有一些文件无法删除，可以先重启主机再执行</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">pkill aliyun-service<br><span class="hljs-built_in">rm</span> -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service<br><span class="hljs-built_in">rm</span> -rf /usr/local/aegis*<br></code></pre></td></tr></table></figure><h4 id="4-最后就是屏蔽阿里云盾的IP">4.最后就是屏蔽阿里云盾的IP</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">iptables -I INPUT -s 140.205.201.0/28 -j DROP<br>iptables -I INPUT -s 140.205.201.16/29 -j DROP<br>iptables -I INPUT -s 140.205.201.32/28 -j DROP<br>iptables -I INPUT -s 140.205.225.192/29 -j DROP<br>iptables -I INPUT -s 140.205.225.200/30 -j DROP<br>iptables -I INPUT -s 140.205.225.184/29 -j DROP<br>iptables -I INPUT -s 140.205.225.183/32 -j DROP<br>iptables -I INPUT -s 140.205.225.206/32 -j DROP<br>iptables -I INPUT -s 140.205.225.205/32 -j DROP<br>iptables -I INPUT -s 140.205.225.195/32 -j DROP<br>iptables -I INPUT -s 140.205.225.204/32 -j DROP<br></code></pre></td></tr></table></figure><h4 id="5-检查阿里云盾是否卸载干净">5.检查阿里云盾是否卸载干净</h4><p>最后检查下自己服务器上的阿里云盾是否卸载干净了，主要就是看进程里有没有阿里云盾的相关进程了（AliYunDun、aliyun-service和AliYunDunUpdate），可以通过<code>ps -aux | grep -E 'aliyun|AliYunDun'</code>来检查，如果没有相关进程则说明阿里云盾已经卸载干净了。</p><h4 id="参考文章：">参考文章：</h4><p><a href="https://www.vpsgo.com/uninstall-aliyundun.html">阿里云如何完全卸载阿里云盾（安骑士）并屏蔽阿里云盾IP - VPS GO</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Aliyun</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL/MariaDB主从复制教程</title>
    <link href="/2023/04/mysql-master-slave-copy.html"/>
    <url>/2023/04/mysql-master-slave-copy.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自己的网站前几天遭遇了cc攻击，才考虑到数据库及时备份的重要性，数据库更新比较频繁的情况下，每日定时备份可没办法应对突发情况，自然想到了主从复制，学着弄了下，正好也总结一下自己在生产环境操作的过程，以便日后再用。</p><h4 id="主从复制机制实现原理："><a href="#主从复制机制实现原理：" class="headerlink" title="主从复制机制实现原理："></a>主从复制机制实现原理：</h4><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304251702505.png"></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h4><ul><li>两台安装有mysql&#x2F;mariadb的服务器，一台为master，一台为slave。</li><li>主（master）机需要开放相应的数据库端口，默认3306；</li><li>主从复制，顾名思义从master机到slave机的单向同步，这点明白即可。</li></ul><h4 id="二、master机配置"><a href="#二、master机配置" class="headerlink" title="二、master机配置"></a>二、master机配置</h4><p>编辑mysql配置 <code>vim my.cnf</code> ，my.cnf位置自行确定，确保以下配置存在：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">log-bin</span>=mysql-bin   <span class="hljs-comment">#[必须]启用二进制日志</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">1</span>         <span class="hljs-comment">#[必须]服务器唯一ID，默认是1</span><br></code></pre></td></tr></table></figure><p>保存配置后重启mysql，通过ssh进入mysql命令行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -uroot -p密码<br></code></pre></td></tr></table></figure><p>新建slave用户，指定对应slave机ip和设置密码，并刷新权限，后面会用到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">GRANT REPLICATION slave ON *.* to &#x27;slave_user&#x27;@&#x27;slave机IP&#x27; identified by &#x27;自定义密码&#x27;;<br>flush privileges;<br></code></pre></td></tr></table></figure><p>重启mysql后再次进入mysql命令行，查看master状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show master status;<br></code></pre></td></tr></table></figure><p>看到File以及Position，说明bin-log是在运行的，记录其中的 <code>mysql-bin.00029</code> 和 <code>13925115</code> ，每个人的数据不一样</p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304251633507.png" style="zoom: 80%;" /><p><strong>这里有两个场景：</strong></p><ul><li>master机和slave机都是新机，没有任何数据，此时就可以跳过下面这一步</li><li>我需要备份master机所有的数据库到slave，但是我的slave机刚搭建mysql，master机上有数据，这时候你就需要备份导出master机的数据库并还原到slave机，确保主从机数据的一致性，如果你的master机上的数据一直有变动（通过 <code>show master status;</code> 观察Position值），那么你需要<strong>确保备份导出前后Position值是一致的</strong>。这时候你可能需要采取<strong>锁全表</strong>操作，或者你想赌一把，能确保备份前后Position值不变也是可以的。</li></ul><h4 id="三、slave机配置"><a href="#三、slave机配置" class="headerlink" title="三、slave机配置"></a>三、slave机配置</h4><p>slave机也一样要配置my.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">log-bin</span>=mysql-bin   <span class="hljs-comment">#[可选]启用二进制日志</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">2</span>         <span class="hljs-comment">#id一定要比master机大</span><br></code></pre></td></tr></table></figure><p>重启mysql后查询server-id，确保server-id大于主机的server-id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW VARIABLES LIKE &#x27;server_id&#x27;;<br></code></pre></td></tr></table></figure><p>通过<code>mysql -uroot -p密码</code>进入mysql命令行，执行以下sql，把master机IP，上一步设置的mysql账号密码，记录的File值填入master_log_file，Position值填入master_log_pos：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">change master to master_host=&#x27;master机IP&#x27;,<br>master_user=&#x27;slave_user&#x27;,<br>master_password=&#x27;在master机上设置的自定义密码&#x27;,<br>master_log_file=&#x27;mysql-bin.00029&#x27;,<br>master_log_pos=13925115;<br></code></pre></td></tr></table></figure><p>然后执行启动slave：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">start slave;<br></code></pre></td></tr></table></figure><p>查看slave状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show slave status;<br></code></pre></td></tr></table></figure><p>Slave_IO_Running 和 Slave_SQL_Running 必须都为 Yes 才算成功：</p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304251658911.png" alt="image-20230425165820864" style="zoom:67%;" /><h4 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h4><p>master数据库进行更新或删除操作之后，查看slave数据库是否同步即可。</p><blockquote><p>如需关闭主从复制，可在从机上运行以下sql语句进行关闭：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt;stop slave;#关闭从机复制<br>&gt;reset slave;#重置从机relay-binlog<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>MariaDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决ChatGPT使用节点访问被拒绝(access denied error code 1020)的问题</title>
    <link href="/2023/04/chatgpt-access-denied-use-warp.html"/>
    <url>/2023/04/chatgpt-access-denied-use-warp.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近的网络最热门的，应该当ChatGPT所属了，在IT开发者界更是：有担忧的，有兴奋的，有求知的，一时兴起万层浪，但是，也有很多小白连最基本的大门都没办法进来，因为流量太大了，已远远超过了ChatGPT的服务器所承受能力，这个访问量已大大超出了你的想像，所以请了一台流量高防大将:CloudFlare，先是真人human验证，再是IP验证，很多新人都对Access denied/Access denied Error code 1020深有体会吧，今天就聊一下如何彻底地解决这个问题。</p><h2 id="思路">思路</h2><p>由于CF验证IP，咱们大陆的IP会access denied拒绝，很多海外节点也被拒绝了，因为咱们国人多，热度高，流量大，所以第一排除的就是咱们中国及使用代理最多的中国IP。</p><p>思路就是套用CloudFlare官方自己的Warp，它对自己人还是友好放行的原理。思路跟解锁Netfilx原生IP一样。</p><h2 id="条件">条件</h2><ul><li>自己能配置的节点</li><li>套的IP未被CF自己封</li></ul><h2 id="Warp">Warp</h2><p>什么是Warp呢，请查看官方介绍吧</p><p>官方地址：<a href="https://1.1.1.1">https://1.1.1.1</a></p><h2 id="安装">安装</h2><h3 id="安装前">安装前</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl chat.openai.com<br></code></pre></td></tr></table></figure><p>服务器直接进行curl，直接显示经典的error code:1020错误，说明我能服务器本身就无法访问ChatGPT，所以用它来作为节点，那肯定是不行的</p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304111200857.png" style="zoom:67%;" /><h3 id="直接通过浏览器访问">直接通过浏览器访问</h3><center><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304111158171.png" style="zoom:67%;" /></center><h3 id="安装中">安装中</h3><p>第一，先给服务上个快照，折腾坏了也能恢复折腾前的状态</p><p>第二，安装warp 官网教程：<a href="https://pkg.cloudflareclient.com/install">https://pkg.cloudflareclient.com/install</a></p><p>1.为库安装GPG Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --<span class="hljs-built_in">yes</span> --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg<br></code></pre></td></tr></table></figure><p>2.添加源到库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ <span class="hljs-subst">$(lsb_release -cs)</span> main&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/cloudflare-client.list<br></code></pre></td></tr></table></figure><p>3.update APT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update <span class="hljs-comment">#管理权限直接使用这个更新</span><br>sudo apt update <span class="hljs-comment">#如果不是管理员账号下，使用这个</span><br></code></pre></td></tr></table></figure><p>4.安装Warp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install cloudflare-warp<br></code></pre></td></tr></table></figure><p>5.注册Warp 运行命令给设备注册</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">warp-cli register<br></code></pre></td></tr></table></figure><p>6.打开代理模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">warp-cli set-mode proxy<br></code></pre></td></tr></table></figure><p>7.连接Warp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">warp-cli connect<br></code></pre></td></tr></table></figure><p>8.查验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl ifconfig.me --proxy socks5://127.0.0.1:40000<br></code></pre></td></tr></table></figure><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304111203279.png" style="zoom:67%;" /><p>显示IP地址为CloudFlare的代理IP地址了</p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304111233297.png" alt="image-20230411123332269" style="zoom:67%;" /><p>再测试不使用socks5时候还是1020错误代码，第二条命令带上socks5,没有1020错误代码提示了。</p><p>至此，说明我这能韩国服务器套上了CloudFlare的Warp节点，是能正常访问chat.openai.com了，接下来了就是配置节点的分流路由规则了</p><h3 id="配置xray">配置xray</h3><p>这一步会根据自己用的节点协议有所差异，我这里就用xray的配置方式来作为示例，其他的协议其实可以结合本文并参考官方文档配置。</p><p>1.在&quot;outbounds&quot;的代码块添加出站规则，直接加在json格式的数组里即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-comment">//添加下面这个规则</span><br>    <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chatGPT_proxy&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;socks&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">40000</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>2.在&quot;routing&quot;的代码块添加路由规则，<a href="http://xn--chat-9s6fh5vu7gux9d.openai.xn--comip138-5w0n.com">使用域名chat.openai.com及ip138.com</a>(为了测试是否生效)的规则</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <br>    <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">//添加下面这个路由</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chatGPT_proxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;domain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;chat.openai.com&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;ip138.com&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>3.重启xray服务</p><h3 id="安装后">安装后</h3><p>1.连接节点开启全局模式，<a href="http://xn--ip138-qo0ll97o.com">测试ip138.com</a></p><center><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304111353569.png" style="zoom:67%;" /></center><p>已经是cloudflare的IP地址了。地址和上“安装中——第8条”的：curl <a href="http://ifconfig.me">ifconfig.me</a> --proxy socks5://127.0.0.1:40000结果是一致的</p><p><a href="http://2.xn--chat-9z2h93o.openai.com">2.打开chat.openai.com</a></p><center><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202304111354902.png" style="zoom:67%;" /></center><p>访问成功，不再提示拒绝访问</p><h2 id="总结">总结</h2><p>方法是从解锁Netflix得到的启示，套了Warp就能解锁CloudFlare对你的节点的封锁了，而且现在CloudFlare拒绝访问的IP限制还不是很严格的，从而这个方法可以拯救你节点。</p><p>总结思路：套用warp——设置域名分流规则</p>]]></content>
    
    
    <categories>
      
      <category>VPN技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>xray</tag>
      
      <tag>CloudFlare</tag>
      
      <tag>Warp</tag>
      
      <tag>ChatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在自己的VPS上利用v2ray+Tor打造代理IP池</title>
    <link href="/2023/02/vps-v2ray-tor-ipproxy.html"/>
    <url>/2023/02/vps-v2ray-tor-ipproxy.html</url>
    
    <content type="html"><![CDATA[<h2 id="在自己的VPS上利用v2ray-Tor打造代理IP池">在自己的VPS上利用v2ray+Tor打造代理IP池</h2><h3 id="v2ray轮询-Tor多链路，每次请求都可以拿到一个不同的IP">v2ray轮询+Tor多链路，每次请求都可以拿到一个不同的IP</h3><p>当我们做以下业务的时候，可能会需要大量代理IP：</p><ul><li>HTTP CC/DDOS网站</li><li>爬虫，突破反爬</li><li>基于IP判断用户的投票系统，刷票</li><li>玩pixelcanvas类型的像素画网站，用IP判断不同用户的</li><li>……</li></ul><p>互联网上免费代理IP的网站很多，自建代理IP池的方法也很多。比如下面这个项目：</p><p><a href="https://github.com/constverum/ProxyBroker">constverum/ProxyBroker</a></p><p>包括国内也有一些类似的项目。</p><p>但这些方式都有缺点，比如代理IP稳定性不可靠，需要后期二次手动校验；国外代理国内访问有困难；匿名性没有很好的保证等等。</p><p>今天介绍一种我摸索出来的方法，利用v2ray+Tor自建代理IP池。你需要有一台自己的VPS。</p><h1>1. 在VPS上安装Tor命令行版本</h1><p>debian/ubuntu可以运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y tor<br></code></pre></td></tr></table></figure><p>centos可以运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y tor<br></code></pre></td></tr></table></figure><p>安装好后，编辑<code>/etc/tor/torrc</code>，进行如下编辑（部分配置项）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38801</span> <span class="hljs-comment">#这里开启多个tor端口，对于tor来说，每个端口会使用不同的链路，也就是不同的代理IP</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38802</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38803</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38804</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38805</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38806</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38807</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38808</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38809</span><br><span class="hljs-string">SOCKSPort</span> <span class="hljs-number">38810</span><br><br><span class="hljs-string">SOCKSPolicy</span> <span class="hljs-string">accept</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-comment">#为了安全性，只允许localhost访问tor的端口</span><br><span class="hljs-string">SOCKSPolicy</span> <span class="hljs-string">reject</span> <span class="hljs-string">*</span><br><br><span class="hljs-string">NewCircuitPeriod</span> <span class="hljs-number">30</span> <span class="hljs-comment">#对于每个端口来说，每30秒重新创建一个新链路，也就是换一个新IP</span><br><span class="hljs-string">CircuitBuildTimeout</span> <span class="hljs-number">10</span> <span class="hljs-comment">#对于新建每个链路的过程来说，建立程序超过10秒则直接放弃，保障了连接到线路的质量</span><br></code></pre></td></tr></table></figure><p><strong><code>/etc/tor/torrc</code>进阶配置：</strong></p><p>ip使用指定方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">ExitNodes</span> <span class="hljs-string">ip/fingerprint</span> <span class="hljs-comment">#指定ip地址或指纹</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">ExitNodes</span> &#123;<span class="hljs-string">tw</span>&#125; <span class="hljs-comment">#指定地区 多选用“,”分隔，例：&#123;tw&#125;,&#123;uk&#125;,&#123;zw&#125;，地区码表参考文末码表</span><br><span class="hljs-string">StrictNodes</span> <span class="hljs-number">1</span> <span class="hljs-comment">#设为1则强制使用您指定的地区的节点，若设为0则可能会无视您的设置</span><br></code></pre></td></tr></table></figure><p>避开指定方式访问网站：（黑名单）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">ExcludeExitNodes</span> &#123;<span class="hljs-string">tw</span>&#125; <span class="hljs-comment">#不使用该地区的出口节点</span><br><span class="hljs-string">ExcludeNodes</span> &#123;<span class="hljs-string">tw</span>&#125; <span class="hljs-comment">#不使用该地区的所有类型的节点，即入口、中继、桥连何出口节点。</span><br></code></pre></td></tr></table></figure><h1>2. 在VPS上配置v2ray桥接到tor端口</h1><p>请参考v2ray的<a href="https://www.v2ray.com/">官方文档</a>，这里outbounds部分配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>...（此处省略）<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;socks&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38801</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38802</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>...（此处省略）<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38810</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-tor&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure><p>outbounds中配置了一个tag为my-tor的socks出口，其中加入刚才tor开的一堆端口。v2ray会以轮询的方式使用每个端口，这样就可以做到每个连接都用不同的IP。</p><p>routing部分配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;inboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;websocket-over-https&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tcp&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-tor&quot;</span><span class="hljs-punctuation">,</span> #需要和上面outbound的tag名字一样<br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后自行配置一个inbound（这里不列出），我这里的配置是<code>websocket-over-https</code>。关于如何配置inbound，可以参考<a href="https://guide.v2fly.org/">v2ray白话文教程</a>。也可以使用<a href="https://github.com/sprov065/v2-ui">v2-ui</a>。</p><h1>3. 本地连接v2ray，测试可用性</h1><p>本地我使用v2rayN连接VPS的v2ray，开启本地端口是10808。</p><p>我使用以下脚本进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>n=0<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$n</span> -lt 80 ]; <span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;n&#125;</span>:&quot;</span><br>curl -x socks5://127.0.0.1:10808 ifconfig.me <span class="hljs-comment">#curl -x是指定代理方式连接，ifconfig.me是一个查询外网IP的网站</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br>n=$((n+<span class="hljs-number">1</span>))<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202302100935737.png" alt="image-20230210093542621" style="zoom:67%;" /><p>这样就完成了。你可以增加tor开放socks端口的数量，也可以缩小<code>NewCircuitPeriod</code>的数值，做到尽可能的每次访问都用一个全新的IP。</p><h1>4. 其他贴士</h1><h3 id="4-1-VPS连v2ray速度太慢了？">4.1. VPS连v2ray速度太慢了？</h3><p>尝试给选用基于HTTPS的v2ray inbound协议，套一层Cloudflare CDN。使用<a href="https://github.com/badafans/better-cloudflare-ip">better-cloudflare-ip</a>这个项目自选最快的cf节点。</p><h3 id="4-2-如何进行HTTP-CC-DDOS攻击？">4.2. 如何进行HTTP CC/DDOS攻击？</h3><p>由于v2rayN开放的本地端口是socks协议，而很多CC/DDOS软件只支持HTTP代理。那么可以安装一个proxifier，把相应软件的流量强行导向v2rayN开放的本地socks端口。</p><h3 id="4-3-有什么优点？">4.3. 有什么优点？</h3><ul><li>IP几乎是无限的、并且是高可用的</li><li>匿名性非常高</li></ul><h3 id="4-4-有什么缺点？">4.4. 有什么缺点？</h3><ul><li>有些网站禁止tor节点的IP访问</li><li>速度不如国内的代理IP快</li><li>请仔细查看你VPS提供商的ToS，需要不禁止你在机子上跑tor</li></ul><h3 id="4-5-Tor区域码表">4.5 Tor区域码表</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs text">ASCENSION ISLAND：ac<br>AFGHANISTAN：af<br>ALAND：ax<br>ALBANIA：al<br>ALGERIA：dz<br>ANDORRA：ad<br>ANGOLA：ao<br>ANGUILLA：ai<br>ANTARCTICA：aq<br>ANTIGUA AND BARBUDA：ag<br>ARGENTINA REPUBLIC：ar<br>ARMENIA：am<br>ARUBA：aw<br>AUSTRALIA：au<br>AUSTRIA：at<br>AZERBAIJAN：az<br>BAHAMAS：bs<br>BAHRAIN：bh<br>BANGLADESH：bd<br>BARBADOS：bb<br>BELARUS：by<br>BELGIUM：be<br>BELIZE：bz<br>BENIN：bj<br>BERMUDA：bm<br>BHUTAN：bt<br>BOLIVIA：bo<br>BOSNIA AND HERZEGOVINA：ba<br>BOTSWANA：bw<br>BOUVET ISLAND：bv<br>BRAZIL：br<br>BRITISH INDIAN OCEAN TERR：io<br>BRITISH VIRGIN ISLANDS：vg<br>BRUNEI DARUSSALAM：bn<br>BULGARIA：bg<br>BURKINA FASO：bf<br>BURUNDI：bi<br>CAMBODIA：kh<br>CAMEROON：cm<br>CANADA：ca<br>CAPE VERDE：cv<br>CAYMAN ISLANDS：ky<br>CENTRAL AFRICAN REPUBLIC：cf<br>CHAD：td<br>CHILE：cl<br>PEOPLE&#x27;S REPUBLIC OF CHINA：cn<br>CHRISTMAS ISLANDS：cx<br>COCOS ISLANDS：cc<br>COLOMBIA：co<br>COMORAS：km<br>CONGO：cg<br>CONGO (DEMOCRATIC REPUBLIC)：cd<br>COOK ISLANDS：ck<br>COSTA RICA：cr<br>COTE D IVOIRE：ci<br>CROATIA：hr<br>CUBA：cu<br>CYPRUS：cy<br>CZECH REPUBLIC：cz<br>DENMARK：dk<br>DJIBOUTI：dj<br>DOMINICA：dm<br>DOMINICAN REPUBLIC：do<br>EAST TIMOR：tp<br>ECUADOR：ec<br>EGYPT：eg<br>EL SALVADOR：sv<br>EQUATORIAL GUINEA：gq<br>ESTONIA：ee<br>ETHIOPIA：et<br>FALKLAND ISLANDS：fk<br>FAROE ISLANDS：fo<br>FIJI：fj<br>FINLAND：fi<br>FRANCE：fr<br>FRANCE METROPOLITAN：fx<br>FRENCH GUIANA：gf<br>FRENCH POLYNESIA：pf<br>FRENCH SOUTHERN TERRITORIES：tf<br>GABON：ga<br>GAMBIA：gm<br>GEORGIA：ge<br>GERMANY：de<br>GHANA：gh<br>GIBRALTER：gi<br>GREECE：gr<br>GREENLAND：gl<br>GRENADA：gd<br>GUADELOUPE：gp<br>GUAM：gu<br>GUATEMALA：gt<br>GUINEA：gn<br>GUINEA-BISSAU：gw<br>GUYANA：gy<br>HAITI：ht<br>HEARD &amp;amp; MCDONALD ISLAND：hm<br>HONDURAS：hn<br>HONG KONG （china）：hk<br>HUNGARY：hu<br>ICELAND：is<br>INDIA：in<br>INDONESIA：id<br>IRAN, ISLAMIC REPUBLIC OF：ir<br>IRAQ：iq<br>IRELAND：ie<br>ISLE OF MAN：im<br>ISRAEL：il<br>ITALY：it<br>JAMAICA：jm<br>JAPAN：jp<br>JORDAN：jo<br>KAZAKHSTAN：kz<br>KENYA：ke<br>KIRIBATI：ki<br>KOREA, DEM. PEOPLES REP OF：kp<br>KOREA, REPUBLIC OF：kr<br>KUWAIT：kw<br>KYRGYZSTAN：kg<br>LAO PEOPLE&#x27;S DEM. REPUBLIC：la<br>LATVIA：lv<br>LEBANON：lb<br>LESOTHO：ls<br>LIBERIA：lr<br>LIBYAN ARAB JAMAHIRIYA：ly<br>LIECHTENSTEIN：li<br>LITHUANIA：lt<br>LUXEMBOURG：lu<br>MACAO：mo<br>MACEDONIA：mk<br>MADAGASCAR：mg<br>MALAWI：mw<br>MALAYSIA：my<br>MALDIVES：mv<br>MALI：ml<br>MALTA：mt<br>MARSHALL ISLANDS：mh<br>MARTINIQUE：mq<br>MAURITANIA：mr<br>MAURITIUS：mu<br>MAYOTTE：yt<br>MEXICO：mx<br>MICRONESIA：fm<br>MOLDAVA REPUBLIC OF：md<br>MONACO：mc<br>MONGOLIA：mn<br>MONTENEGRO：me<br>MONTSERRAT：ms<br>MOROCCO：ma<br>MOZAMBIQUE：mz<br>MYANMAR：mm<br>NAMIBIA：na<br>NAURU：nr<br>NEPAL：np<br>NETHERLANDS ANTILLES：an<br>NETHERLANDS, THE：nl<br>NEW CALEDONIA：nc<br>NEW ZEALAND：nz<br>NICARAGUA：ni<br>NIGER：ne<br>NIGERIA：ng<br>NIUE：nu<br>NORFOLK ISLAND：nf<br>NORTHERN MARIANA ISLANDS：mp<br>NORWAY：no<br>OMAN：om<br>PAKISTAN：pk<br>PALAU：pw<br>PALESTINE：ps<br>PANAMA：pa<br>PAPUA NEW GUINEA：pg<br>PARAGUAY：py<br>PERU：pe<br>PHILIPPINES (REPUBLIC OF THE)：ph<br>PITCAIRN：pn<br>POLAND：pl<br>PORTUGAL：pt<br>PUERTO RICO：pr<br>QATAR：qa<br>REUNION：re<br>ROMANIA：ro<br>RUSSIAN FEDERATION：ru<br>RWANDA：rw<br>SAMOA：ws<br>SAN MARINO：sm<br>SAO TOME/PRINCIPE：st<br>SAUDI ARABIA：sa<br>SCOTLAND：uk<br>SENEGAL：sn<br>SERBIA：rs<br>SEYCHELLES：sc<br>SIERRA LEONE：sl<br>SINGAPORE：sg<br>SLOVAKIA：sk<br>SLOVENIA：si<br>SOLOMON ISLANDS：sb<br>SOMALIA：so<br>SOMOA,GILBERT,ELLICE ISLANDS：as<br>SOUTH AFRICA：za<br>SOUTH GEORGIA, SOUTH SANDWICH ISLANDS：gs<br>SOVIET UNION：su<br>SPAIN：es<br>SRI LANKA：lk<br>ST. HELENA：sh<br>ST. KITTS AND NEVIS：kn<br>ST. LUCIA：lc<br>ST. PIERRE AND MIQUELON：pm<br>ST. VINCENT &amp;amp; THE GRENADINES：vc<br>SUDAN：sd<br>SURINAME：sr<br>SVALBARD AND JAN MAYEN：sj<br>SWAZILAND：sz<br>SWEDEN：se<br>SWITZERLAND：ch<br>SYRIAN ARAB REPUBLIC：sy<br>TAIWAN （china）：tw<br>TAJIKISTAN：tj<br>TANZANIA, UNITED REPUBLIC OF：tz<br>THAILAND：th<br>TOGO：tg<br>TOKELAU：tk<br>TONGA：to<br>TRINIDAD AND TOBAGO：tt<br>TUNISIA：tn<br>TURKEY：tr<br>TURKMENISTAN：tm<br>TURKS AND CALCOS ISLANDS：tc<br>TUVALU：tv<br>UGANDA：ug<br>UKRAINE：ua<br>UNITED ARAB EMIRATES：ae<br>UNITED KINGDOM (no new registrations)：gb<br>UNITED KINGDOM：uk<br>UNITED STATES：us<br>UNITED STATES MINOR OUTL.IS.：um<br>URUGUAY：uy<br>UZBEKISTAN：uz<br>VANUATU：vu<br>VATICAN CITY STATE：va<br>VENEZUELA：ve<br>VIET NAM：vn<br>VIRGIN ISLANDS (USA)：vi<br>WALLIS AND FUTUNA ISLANDS：wf<br>WESTERN SAHARA：eh<br>YEMEN：ye<br>ZAMBIA：zm<br>ZIMBABWE：zw<br></code></pre></td></tr></table></figure><p>本文仅提供技术思路，请勿用于非法业务。</p><h4 id="参考文章：">参考文章：</h4><p><a href="https://blog.skyju.cc/post/v2ray-tor-proxy-ip-pool/">在自己的VPS上利用v2ray+Tor打造代理IP池 (skyju.cc)</a></p><p><a href="https://zhuanlan.zhihu.com/p/386417604">TOR浏览器进阶使用指南：指定or禁止 出口节点 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>VPN技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>v2ray</tag>
      
      <tag>Tor</tag>
      
      <tag>ip代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中使用es条件构造器BoolQueryBuilder</title>
    <link href="/2022/12/java-es-querybuilder.html"/>
    <url>/2022/12/java-es-querybuilder.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于es在java中查询没法像mybatis那样方便，而且es的构造器使用也比较繁琐，理解不是很方便，所以写一篇文章来记录es构造器BoolQueryBuilder查询时各种条件的构造的正确姿势。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h4 id="1-构造准备"><a href="#1-构造准备" class="headerlink" title="1.构造准备"></a>1.构造准备</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.构建SearchRequest请求对象，指定索引库</span><br><span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;data_info&quot;</span>);<br><span class="hljs-comment">//2.构建SearchSourceBuilder查询对象</span><br><span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">sourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br><span class="hljs-comment">//2.1 这个条件用于返回所有命中条件的数据数量, 不设置则返回大概数值</span><br>sourceBuilder.trackTotalHits(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//3.检索条件构造</span><br><span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">bqb</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br></code></pre></td></tr></table></figure><h4 id="2-条件构造"><a href="#2-条件构造" class="headerlink" title="2.条件构造"></a>2.条件构造</h4><ul><li>must可用filter代替，查询效率会更高，因为must会对结果进行_score评估</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.1 完全匹配</span><br>bqb.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">666L</span>);<br>         <br><span class="hljs-comment">//3.2 模糊匹配</span><br>bqb.must(QueryBuilders.matchPhraseQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张&quot;</span>);<br>         <br><span class="hljs-comment">//3.3 in的效果 传单个参数就是完全匹配</span><br>bqb.must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>[]&#123;<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">3L</span>&#125;);<br>bqb.must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">3L</span>);<br>         <br><span class="hljs-comment">//3.4 or条件</span><br><span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">shouldQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>shouldQuery.should(QueryBuilders.matchQuery(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">1L</span>);<br>shouldQuery.should(QueryBuilders.matchQuery(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">2L</span>);<br>shouldQuery.minimumShouldMatch(<span class="hljs-number">1</span>); <span class="hljs-comment">//至少满足一个</span><br>bqb.must(shouldQuery);<br>                   <br><span class="hljs-comment">//3.5 非null</span><br>bqb.must(QueryBuilders.existsQuery(<span class="hljs-string">&quot;iden&quot;</span>));<br><span class="hljs-comment">//是null             </span><br>bqb.mustNot(QueryBuilders.existsQuery(<span class="hljs-string">&quot;iden&quot;</span>));<br><br><span class="hljs-comment">//3.6 大于等于gte (gt-大于 lt-小于 lte-小于等于)</span><br>bqb.must(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;time&quot;</span>).gte(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>         <br><span class="hljs-comment">//3.7 中文完全匹配</span><br>bqb.must(queryBuilder.matchPhraseQuery(<span class="hljs-string">&quot;key&quot;</span>, value));<br><br><span class="hljs-comment">//3.8 匹配多个字段</span><br>bqb.must(queryBuilder.multiMatchQuery(value, key1, key2, key3));<br></code></pre></td></tr></table></figure><h4 id="3-构造完成-准备查询"><a href="#3-构造完成-准备查询" class="headerlink" title="3.构造完成 准备查询"></a>3.构造完成 准备查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//4.将QuseryBuilder对象设置到SearchSourceBuilder对象中</span><br>sourceBuilder.query(bqb);<br><span class="hljs-comment">//5.排序</span><br>sourceBuilder.sort(<span class="hljs-string">&quot;updateTime&quot;</span>, SortOrder.DESC);<br><span class="hljs-comment">//6.分页</span><br>sourceBuilder.from((dto.getPageNum() - <span class="hljs-number">1</span>) * dto.getPageSize());<br>sourceBuilder.size(dto.getPageSize());<br><br><span class="hljs-comment">//7.将SearchSourceBuilder设置到SearchRequest中</span><br>searchRequest.source(sourceBuilder);<br><br><span class="hljs-comment">//8.调用方法查询数据</span><br><span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);<br>         <br><span class="hljs-comment">//9.解析返回结果</span><br>SearchHit[] hits = searchResponse.getHits().getHits();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; hits.length; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;返回的结果： &quot;</span> + hits[i].getSourceAsString());<br>&#125;<br><br>log.info(<span class="hljs-string">&quot;返回总数为：&quot;</span> + searchResponse.getHits().getTotalHits());<br><span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)searchResponse.getHits().getTotalHits().value;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Caffeine一级缓存介绍和应用</title>
    <link href="/2022/09/caffeine-intro-and-apply.html"/>
    <url>/2022/09/caffeine-intro-and-apply.html</url>
    
    <content type="html"><![CDATA[<h2 id="Caffeine介绍"><a href="#Caffeine介绍" class="headerlink" title="Caffeine介绍"></a>Caffeine介绍</h2><h3 id="redis和caffeine的区别"><a href="#redis和caffeine的区别" class="headerlink" title="redis和caffeine的区别"></a>redis和caffeine的区别</h3><p>相同点就不用说，广义上都是缓存的方式。咱们就说说不同。</p><ul><li>redis是将数据存储到内存里；caffeine是将数据存储在本地应用里</li><li>caffeine和redis相比，没有了网络IO上的消耗</li></ul><p>那么在高并发场景中，一般我们都是结合使用，形成一二级缓存。caffeine作为一级缓存，redis作为二级缓存。<br>使用流程大致如下：去一级缓存中查找数据（caffeine-本地应用内）如果没有的话，去二级缓存中查找数据（redis-内存）再没有，再去数据库中查找数据（数据库-磁盘）。</p><p>caffeine项目地址：<a href="https://github.com/ben-manes/caffeine">ben-manes&#x2F;caffeine: A high performance caching library for Java (github.com)</a></p><h2 id="caffeine的应用"><a href="#caffeine的应用" class="headerlink" title="caffeine的应用"></a>caffeine的应用</h2><p>Caffeine 相当于一个缓存工厂，可以创建出多个缓存实例 Cache。这些缓存实例都继承了 Caffeine 的参数配置，Caffeine 是如何配置的，这些缓存实例就具有什么样的特性和功能。<br>Caffeine 是目前性能最好的本地缓存，因此，在考虑使用本地缓存时，直接选择 Caffeine 即可。</p><h3 id="将caffeine作为一级缓存使用"><a href="#将caffeine作为一级缓存使用" class="headerlink" title="将caffeine作为一级缓存使用"></a>将caffeine作为一级缓存使用</h3><h4 id="1-配置相关"><a href="#1-配置相关" class="headerlink" title="1.配置相关"></a>1.配置相关</h4><ul><li>maven引包，可自行根据流行版本更改版本号：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>caffeine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>缓存配置类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;<br><span class="hljs-keyword">import</span> org.springframework.cache.caffeine.CaffeineCache;<br><span class="hljs-keyword">import</span> org.springframework.cache.interceptor.SimpleKeyGenerator;<br><span class="hljs-keyword">import</span> org.springframework.cache.support.AbstractCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.cache.support.SimpleCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aunero</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 缓存配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置缓存管理器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存管理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AbstractCacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCacheManager</span>();<br>        <span class="hljs-comment">//把各个cache注册到cacheManager中，CaffeineCache实现了org.springframework.cache.Cache接口</span><br>        List&lt;CaffeineCache&gt; caches = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.asList(CacheInstance.values()).forEach(cacheInstance -&gt; &#123;<br>            <span class="hljs-type">CaffeineCache</span> <span class="hljs-variable">caffeineCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaffeineCache</span>(cacheInstance.name(), Caffeine.newBuilder()<br>                    .recordStats()<br>                    .expireAfterWrite(cacheInstance.getTtl(), TimeUnit.SECONDS)<br>                    .build());<br>            caches.add(caffeineCache);<br>        &#125;);<br>        cacheManager.setCaches(caches);<br>        <span class="hljs-keyword">return</span> cacheManager;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SimpleKeyGenerator <span class="hljs-title function_">simpleKeyGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleKeyGenerator</span>();<br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>缓存代理类，用来获取缓存和刷新：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.ReflectUtil;<br><span class="hljs-keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cache.Cache;<br><span class="hljs-keyword">import</span> org.springframework.cache.caffeine.CaffeineCache;<br><span class="hljs-keyword">import</span> org.springframework.cache.support.AbstractCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aunero</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 缓存代理类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheCreator</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AbstractCacheManager cacheManager;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取缓存，如果获取不到创建一个</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cacheInstance</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Cache <span class="hljs-title function_">getCache</span><span class="hljs-params">(CacheInstance cacheInstance, List&lt;String&gt; values)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cacheNameSuffix</span> <span class="hljs-operator">=</span> String.join(<span class="hljs-string">&quot;&amp;&quot;</span>, values);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cacheName</span> <span class="hljs-operator">=</span> cacheInstance.name() + <span class="hljs-string">&quot;&amp;&quot;</span> + cacheNameSuffix;<br>        <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> cacheManager.getCache(cacheName);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cache) &#123;<br>            <span class="hljs-keyword">synchronized</span> (cacheName.intern()) &#123;<br>                cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaffeineCache</span>(cacheName, Caffeine.newBuilder()<br>                        .recordStats()<br>                        .expireAfterWrite(cacheInstance.getTtl(), TimeUnit.SECONDS)<br>                        .build());<br>                Map&lt;String, Cache&gt; caches = (ConcurrentHashMap&lt;String, Cache&gt;) ReflectUtil.getFieldValue(cacheManager, <span class="hljs-string">&quot;cacheMap&quot;</span>);<br>                caches.put(cacheName, cache);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cache;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>我们还需要一个对业务数据进行区分的缓存枚举类，这些缓存配置将在缓存管理器初始化时加载：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aunero</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 缓存实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CacheInstance</span> &#123;<br>    <span class="hljs-comment">//枚举自行定义</span><br>    STUDENT_INFO,<span class="hljs-comment">//学生信息</span><br>    CLASS_INFO(<span class="hljs-number">600</span>, <span class="hljs-number">1024</span>),<span class="hljs-comment">//班级信息, 可自定义过期时间和最大数量</span><br>    ;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ttl</span> <span class="hljs-operator">=</span> RandomUtil.randomInt(<span class="hljs-number">300</span>, <span class="hljs-number">360</span>);        <span class="hljs-comment">//默认过期时间  5分钟~6分钟</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span>;    <span class="hljs-comment">//最大數量</span><br><br>    CacheInstance() &#123;<br>    &#125;<br><br><br>    CacheInstance(<span class="hljs-type">int</span> ttl) &#123;<br>        <span class="hljs-built_in">this</span>.ttl = ttl;<br>    &#125;<br><br>    CacheInstance(<span class="hljs-type">int</span> ttl, <span class="hljs-type">int</span> maxSize) &#123;<br>        <span class="hljs-built_in">this</span>.ttl = ttl;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> maxSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMaxSize</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTtl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ttl;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTtl</span><span class="hljs-params">(<span class="hljs-type">int</span> ttl)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ttl = ttl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-注解实现和工具类"><a href="#2-注解实现和工具类" class="headerlink" title="2.注解实现和工具类"></a>2.注解实现和工具类</h4><p>配置完了缓存，我们需要在业务上使用,我们可以通过切面注解的方式来实现缓存,这样可以大大减少业务代码和缓存代码的耦合性。</p><ul><li>缓存注解类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aunero</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Cacheable &#123;<br><br>    CacheInstance <span class="hljs-title function_">cacheName</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cache缓存名拼接后缀的参数</span><br><span class="hljs-comment">     * 可填方法名或者针对这个方法独一无二的标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    String[] cacheNameSuffix() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存的键, 可以填入需要作为缓存依据的参数名,</span><br><span class="hljs-comment">     * 不写默认所有参数作为依据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    String [] keys() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>缓存删除注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aunero</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CacheEvict &#123;<br><br>    CacheInstance[] cacheName() ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cache缓存名拼接后缀的参数，注意区分顺序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    String[] cacheNameSuffix() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>缓存切面实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.CodeSignature;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cache.Cache;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aunero</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 缓存切面处理类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheAspectHandler</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CacheCreator cacheCreator;<br><br>    <span class="hljs-comment">//缓存开启状态 也可以配置到配置文件中读取yml</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">enableCache</span> <span class="hljs-operator">=</span> Boolean.TRUE;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取缓存, 没有则添加缓存在返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pjp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cacheable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;@annotation(cacheable)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">cacheResponse</span><span class="hljs-params">(ProceedingJoinPoint pjp, Cacheable cacheable)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Object result;<br><br>        <span class="hljs-keyword">if</span> (enableCache) &#123;<br>            <span class="hljs-comment">//获取参数</span><br>            String[] argNames = ((CodeSignature) pjp.getSignature()).getParameterNames();<br>            Object[] args = pjp.getArgs();<br>            <span class="hljs-comment">//生成参数键值对</span><br>            Map&lt;String, Object&gt; argMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; argNames.length; i++) &#123;<br>                argMap.put(argNames[i], args[i]);<br>            &#125;<br><br>            String key;<br>            <span class="hljs-keyword">if</span>(cacheable.keys().length != <span class="hljs-number">0</span>)&#123;<br>                key = CacheUtil.generateCacheKeyByMapAndSpecifiedKeys(argMap, cacheable.keys());<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                key = CacheUtil.generateCacheKeyByMap(argMap);<br>            &#125;<br><br>            <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> cacheCreator.getCache(cacheable.cacheName(), Arrays.asList(cacheable.cacheNameSuffix()));<br>            result = cache.get(key, Object.class);<br>            <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>                log.debug(String.format(<span class="hljs-string">&quot;命中缓存,实例：%s, 键：%s &quot;</span>, cache.getName(), key));<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result = pjp.proceed();<br>                cache.put(key, result);<br>                log.debug(String.format(<span class="hljs-string">&quot;缓存成功,实例：%s, 键：%s &quot;</span>, cache.getName(), key));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//不开启缓存 直接过方法</span><br>            result = pjp.proceed();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pjp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cacheEvict</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;@annotation(cacheEvict)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">evictCacheResponse</span><span class="hljs-params">(ProceedingJoinPoint pjp, CacheEvict cacheEvict)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        CacheInstance[] cacheInstances = cacheEvict.cacheName();<br>        Arrays.stream(cacheInstances).forEach(cacheInstance -&gt; &#123;<br>            <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> cacheCreator.getCache(cacheInstance, Arrays.asList(cacheEvict.cacheNameSuffix()));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != cache) &#123;<br>                cache.clear();<br>                log.debug(String.format(<span class="hljs-string">&quot;清除缓存成功,实例：%s &quot;</span>, cache.getName()));<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> pjp.proceed();<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>使用到的缓存工具类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.util.ArrayUtil;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br><span class="hljs-keyword">import</span> org.springframework.cache.Cache;<br><span class="hljs-keyword">import</span> org.springframework.cache.interceptor.SimpleKey;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Aunero</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getValue</span><span class="hljs-params">(Cache cache, Object key, Class&lt;T&gt; returnClass)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span> || key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cache.get(key, returnClass);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateCacheKey</span><span class="hljs-params">(Object... keys)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleKey</span>(keys);<br>        List&lt;Object&gt; objects = Arrays.asList(keys);<br>        <span class="hljs-keyword">return</span> objects.stream().map(o -&gt; o == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : String.valueOf(o)).collect(Collectors.joining(<span class="hljs-string">&quot;&amp;&quot;</span>));<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cacheValue</span><span class="hljs-params">(Cache cache, Object value, Object... keys)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cache) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;内部错误：缓存器为空&quot;</span>);<br>        &#125;<br>        cache.put(generateCacheKey(keys), value);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateCacheKeyByMap</span><span class="hljs-params">(Map&lt;String, Object&gt; argMap)</span> &#123;<br>        <span class="hljs-comment">//直接将参数转为json作为缓存key</span><br>        <span class="hljs-keyword">return</span> JSONUtil.toJsonStr(argMap);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateCacheKeyByMapAndSpecifiedKeys</span><span class="hljs-params">(Map&lt;String, Object&gt; argMap, String... keys)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ArrayUtil.isEmpty(keys)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;请指定缓存的key&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//将需要参数作为缓存key</span><br>        Map&lt;String, Object&gt; keysMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Arrays.stream(keys).forEach(key -&gt; keysMap.put(key, argMap.get(key)));<br>        <span class="hljs-keyword">return</span> generateCacheKeyByMap(keysMap);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-缓存使用"><a href="#3-缓存使用" class="headerlink" title="3.缓存使用"></a>3.缓存使用</h4><ul><li>添加缓存-情况1：将所有参数作为缓存key，无需配置keys</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(cacheName = CacheInstance.STUDENT_INFO,  //枚举类存放的缓存名</span><br><span class="hljs-meta">           cacheNameSuffix = &quot;selectStudentList&quot;)</span><span class="hljs-comment">//缓存前缀, 对这部分缓存的唯一标识, 这里可以使用方法名, 方便查找和删除</span><br><span class="hljs-keyword">public</span> Map <span class="hljs-title function_">selectStudentList</span><span class="hljs-params">(Student conditon, Clazz cls)</span>&#123;<br>    <span class="hljs-comment">//业务代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>添加缓存-情况2：部分参数作为缓存key，配置keys</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(cacheName = CacheInstance.STUDENT_INFO,  //枚举类存放的缓存名</span><br><span class="hljs-meta">           cacheNameSuffix = &quot;selectStudentList&quot;,//缓存前缀, 对这部分缓存的唯一标识, 这里可以使用方法名, 方便查找和删除</span><br><span class="hljs-meta">           keys= &#123;&quot;conditon&quot;&#125;)</span><span class="hljs-comment">//只需要将参数condition作为缓存key</span><br><span class="hljs-keyword">public</span> Map <span class="hljs-title function_">selectStudentList</span><span class="hljs-params">(Student conditon, Clazz cls)</span>&#123;<br>    <span class="hljs-comment">//业务代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>缓存成功后，会打印缓存成功的日志，重复调用接口会打印命中缓存的日志，这时可以看到实例以及key</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">38.016</span> <span class="hljs-selector-attr">[http-nio-8097-exec-1]</span> DEBUG c<span class="hljs-selector-class">.k</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.CacheAspectHandler</span> - <span class="hljs-selector-attr">[cacheResponse,68]</span> - 缓存成功,实例：STUDENT_INFO&amp;selectStudentList, 键：&#123;<span class="hljs-string">&quot;conditon&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张&quot;</span>&#125;&#125; <br><span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">44.243</span> <span class="hljs-selector-attr">[http-nio-8097-exec-2]</span> DEBUG c<span class="hljs-selector-class">.k</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.CacheAspectHandler</span> - <span class="hljs-selector-attr">[cacheResponse,63]</span> - 命中缓存,实例：STUDENT_INFO&amp;selectStudentList, 键：&#123;<span class="hljs-string">&quot;conditon&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张&quot;</span>&#125;&#125; <br></code></pre></td></tr></table></figure><ul><li>删除缓存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheEvict(cacheName = CacheInstance.STUDENT_INFO,  //枚举类存放的缓存名</span><br><span class="hljs-meta">           cacheNameSuffix = &quot;selectStudentList&quot;)</span><span class="hljs-comment">//缓存前缀, 清除该标识下的所有缓存</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delCache</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//业务代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>清除缓存成功，则会打印清除成功日志</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">14</span>:<span class="hljs-number">54</span>:<span class="hljs-number">43.911</span> <span class="hljs-selector-attr">[http-nio-8097-exec-5]</span> DEBUG c<span class="hljs-selector-class">.k</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.CacheAspectHandler</span> - <span class="hljs-selector-attr">[lambda$evictCacheResponse$0,94]</span> - 清除缓存成功,实例：STUDENT_INFO&amp;selectStudentList<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上只展示了Caffeine缓存的基础应用，基本的缓存需求可以满足，当然也可以在切面中加入redis作为二级缓存使用。</p><p>Caffeine缓存具有很好的性能和很强的扩展性，更多扩展用法可以参考Caffeine缓存的官方文档（<a href="https://github.com/ben-manes/caffeine/wiki/Population-zh-CN">Population zh CN · ben-manes&#x2F;caffeine Wiki (github.com)</a>），若代码有错误或不足的地方可以评论回复。</p><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><p><a href="https://blog.csdn.net/weixin_44427181/article/details/124817522">caffeine本地缓存的使用和详解_小曲同学呀的博客-CSDN博客_caffeine本地缓存</a></p>]]></content>
    
    
    <categories>
      
      <category>Java开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Caffeine</tag>
      
      <tag>缓存</tag>
      
      <tag>面向切面编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux防火墙常用命令</title>
    <link href="/2022/08/Linux-firewall-cmd.html"/>
    <url>/2022/08/Linux-firewall-cmd.html</url>
    
    <content type="html"><![CDATA[<h5 id="防火墙常用命令："><a href="#防火墙常用命令：" class="headerlink" title="防火墙常用命令："></a>防火墙常用命令：</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">firewall-cmd --state              <span class="hljs-comment">##查看防火墙状态，是否是running</span><br>firewall-cmd --reload              <span class="hljs-comment">##重新载入配置，比如添加规则之后，需要执行此命令</span><br>firewall-cmd --get-zones            <span class="hljs-comment">##列出支持的zone</span><br>firewall-cmd --get-services           <span class="hljs-comment">##列出支持的服务，在列表中的服务是放行的</span><br>firewall-cmd --query-service ftp        <span class="hljs-comment">##查看ftp服务是否支持，返回yes或者no</span><br>firewall-cmd --add-service=ftp         <span class="hljs-comment">##临时开放ftp服务</span><br>firewall-cmd --add-service=ftp --permanent   <span class="hljs-comment">##永久开放ftp服务</span><br>firewall-cmd --remove-service=ftp --permanent  <span class="hljs-comment">##永久移除ftp服务</span><br>firewall-cmd --add-port=80/tcp --permanent   <span class="hljs-comment">##永久添加80端口 </span><br>firewall-cmd --remove-port=80/tcp --permanent   <span class="hljs-comment">##永久移除80端口 </span><br>firewall-cmd --zone=public --list-ports    <span class="hljs-comment">##查看已开放的端口</span><br><br>iptables -L -n                 <span class="hljs-comment">##查看规则，这个命令是和iptables的相同的</span><br></code></pre></td></tr></table></figure><h5 id="1、开放端口"><a href="#1、开放端口" class="headerlink" title="1、开放端口"></a>1、开放端口</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">firewall-cmd --zone=public --add-port=5672/tcp --permanent  <span class="hljs-comment"># 开放5672端口</span><br><br>firewall-cmd --zone=public --remove-port=5672/tcp --permanent <span class="hljs-comment">#关闭5672端口</span><br><br>firewall-cmd --reload  <span class="hljs-comment"># 配置立即生效</span><br></code></pre></td></tr></table></figure><h5 id="2、查看防火墙所有开放的端口"><a href="#2、查看防火墙所有开放的端口" class="headerlink" title="2、查看防火墙所有开放的端口"></a>2、查看防火墙所有开放的端口</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">firewall-cmd --zone=public --list-ports<br></code></pre></td></tr></table></figure><h5 id="3-、关闭防火墙"><a href="#3-、关闭防火墙" class="headerlink" title="3.、关闭防火墙"></a>3.、关闭防火墙</h5><ul><li>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><h5 id="4、查看防火墙状态"><a href="#4、查看防火墙状态" class="headerlink" title="4、查看防火墙状态"></a>4、查看防火墙状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">firewall-cmd --state<br></code></pre></td></tr></table></figure><h5 id="5、查看监听的端口"><a href="#5、查看监听的端口" class="headerlink" title="5、查看监听的端口"></a>5、查看监听的端口</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">netstat -lnpt<br></code></pre></td></tr></table></figure><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202208301156571.png"></p><ul><li><em>PS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools</em></li></ul><h5 id="6、检查端口被哪个进程占用"><a href="#6、检查端口被哪个进程占用" class="headerlink" title="6、检查端口被哪个进程占用"></a>6、检查端口被哪个进程占用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">netstat -lnpt |grep 5672<br></code></pre></td></tr></table></figure><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202208301156139.png"></p><h5 id="7、查看进程的详细信息"><a href="#7、查看进程的详细信息" class="headerlink" title="7、查看进程的详细信息"></a>7、查看进程的详细信息</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps 6832<br></code></pre></td></tr></table></figure><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202208301156183.png"></p><h5 id="8、中止进程"><a href="#8、中止进程" class="headerlink" title="8、中止进程"></a>8、中止进程</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">kill</span> -9 6832<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过yum安装docker教程</title>
    <link href="/2022/08/yum-install-docker.html"/>
    <url>/2022/08/yum-install-docker.html</url>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。</p><h4 id="1-docker要求系统内核版本高于3-10，检查内核版本"><a href="#1-docker要求系统内核版本高于3-10，检查内核版本" class="headerlink" title="1.docker要求系统内核版本高于3.10，检查内核版本"></a>1.docker要求系统内核版本高于3.10，检查内核版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><h4 id="2-卸载旧版本（若安装过）"><a href="#2-卸载旧版本（若安装过）" class="headerlink" title="2.卸载旧版本（若安装过）"></a>2.卸载旧版本（若安装过）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum remove docker docker-common docker-selinux docker-engine<br></code></pre></td></tr></table></figure><h4 id="3-安装yum-utils，方便添加docker的yum源"><a href="#3-安装yum-utils，方便添加docker的yum源" class="headerlink" title="3.安装yum-utils，方便添加docker的yum源"></a>3.安装yum-utils，方便添加docker的yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h4 id="4-设置yum源"><a href="#4-设置yum源" class="headerlink" title="4.设置yum源"></a>4.设置yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="5-查看仓库中的所有版本，选择特定的版本安装，默认安装最新版本"><a href="#5-查看仓库中的所有版本，选择特定的版本安装，默认安装最新版本" class="headerlink" title="5.查看仓库中的所有版本，选择特定的版本安装，默认安装最新版本"></a>5.查看仓库中的所有版本，选择特定的版本安装，默认安装最新版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum list docker-ce --showduplicates | <span class="hljs-built_in">sort</span> -r<br></code></pre></td></tr></table></figure><h4 id="6-安装docker"><a href="#6-安装docker" class="headerlink" title="6.安装docker"></a>6.安装docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce<br><span class="hljs-comment">#若指定版本可在docker-ce后添加-版本号, 如docker-ce-17.12.0.ce</span><br></code></pre></td></tr></table></figure><h4 id="7-启动docker并加入开机启动"><a href="#7-启动docker并加入开机启动" class="headerlink" title="7.启动docker并加入开机启动"></a>7.启动docker并加入开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker <br>systemctl <span class="hljs-built_in">enable</span> docker <br></code></pre></td></tr></table></figure><h4 id="8-验证安装"><a href="#8-验证安装" class="headerlink" title="8.验证安装"></a>8.验证安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version<span class="hljs-comment">#查看版本</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch中Data too large问题排查解决方案</title>
    <link href="/2022/07/es-data-too-large.html"/>
    <url>/2022/07/es-data-too-large.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在演示环境测试的时候，发现通过es查的数据偶尔会出现报错的情况，要根据实际情况进行排查和调优。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><h4 id="1-问题定位"><a href="#1-问题定位" class="headerlink" title="1.问题定位"></a>1.问题定位</h4><p>查看es报错日志，看了一下大致意思是请求数据的时候内存超限了，触发了熔断器。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[2021-03-16T21:05:10,338]</span><span class="hljs-selector-attr">[DEBUG]</span><span class="hljs-selector-attr">[o.e.a.a.c.n.i.TransportNodesInfoAction]</span> <span class="hljs-selector-attr">[java-d-service-es-200-56-client-1]</span> failed to execute on node <span class="hljs-selector-attr">[hsF4JzeAQ6mflJRGnJIKzQ]</span><br>org<span class="hljs-selector-class">.elasticsearch</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.RemoteTransportException</span>: <span class="hljs-selector-attr">[data-es-group-online-200-67-2]</span><span class="hljs-selector-attr">[10.110.200.67:9301]</span><span class="hljs-selector-attr">[cluster:monitor/nodes/info[n]</span>]<br>Caused by: org<span class="hljs-selector-class">.elasticsearch</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.breaker</span><span class="hljs-selector-class">.CircuitBreakingException</span>: <span class="hljs-selector-attr">[parent]</span> Data too large, data <span class="hljs-keyword">for</span> <span class="hljs-selector-attr">[&lt;transport_request&gt;]</span> would be <span class="hljs-selector-attr">[33093117638/30.8gb]</span>, which is larger than the limit of <span class="hljs-selector-attr">[31621696716/29.4gb]</span>, real usage: <span class="hljs-selector-attr">[33093114144/30.8gb]</span>, new bytes reserved: <span class="hljs-selector-attr">[3494/3.4kb]</span>, usages <span class="hljs-selector-attr">[request=0/0b, fielddata=0/0b, in_flight_requests=3494/3.4kb, accounting=104564949/99.7mb]</span><br> at org<span class="hljs-selector-class">.elasticsearch</span><span class="hljs-selector-class">.indices</span><span class="hljs-selector-class">.breaker</span><span class="hljs-selector-class">.HierarchyCircuitBreakerService</span><span class="hljs-selector-class">.checkParentLimit</span>(HierarchyCircuitBreakerService<span class="hljs-selector-class">.java</span>:<span class="hljs-number">342</span>) ~<span class="hljs-selector-attr">[elasticsearch-7.3.2.jar:7.3.2]</span><br> at ......<br></code></pre></td></tr></table></figure><p>拉下es源码，定位报错位置org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkParentLimit</span><span class="hljs-params">(<span class="hljs-type">long</span> newBytesReserved, String label)</span> <span class="hljs-keyword">throws</span> CircuitBreakingException &#123;<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">MemoryUsage</span> <span class="hljs-variable">memoryUsed</span> <span class="hljs-operator">=</span> memoryUsed(newBytesReserved);<br>     <span class="hljs-type">long</span> <span class="hljs-variable">parentLimit</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.parentSettings.getLimit();<br>     <span class="hljs-keyword">if</span> (memoryUsed.totalUsage &gt; parentLimit) &#123;<br>         <span class="hljs-built_in">this</span>.parentTripCount.incrementAndGet();<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[parent] Data too large, data for [&quot;</span> + label + <span class="hljs-string">&quot;]&quot;</span> +<br>                 <span class="hljs-string">&quot; would be [&quot;</span> + memoryUsed.totalUsage + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteSizeValue</span>(memoryUsed.totalUsage) + <span class="hljs-string">&quot;]&quot;</span> +<br>                 <span class="hljs-string">&quot;, which is larger than the limit of [&quot;</span> +<br>                 parentLimit + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteSizeValue</span>(parentLimit) + <span class="hljs-string">&quot;]&quot;</span>);<br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.trackRealMemoryUsage) &#123;<br>             <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">realUsage</span> <span class="hljs-operator">=</span> memoryUsed.baseUsage;<br>             message.append(<span class="hljs-string">&quot;, real usage: [&quot;</span>);<br>             message.append(realUsage);<br>             message.append(<span class="hljs-string">&quot;/&quot;</span>);<br>             message.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteSizeValue</span>(realUsage));<br>             message.append(<span class="hljs-string">&quot;], new bytes reserved: [&quot;</span>);<br>             message.append(newBytesReserved);<br>             message.append(<span class="hljs-string">&quot;/&quot;</span>);<br>             message.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteSizeValue</span>(newBytesReserved));<br>             message.append(<span class="hljs-string">&quot;]&quot;</span>);<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             message.append(<span class="hljs-string">&quot;, usages [&quot;</span>);<br>             message.append(String.join(<span class="hljs-string">&quot;, &quot;</span>,<br>                 <span class="hljs-built_in">this</span>.breakers.entrySet().stream().map(e -&gt; &#123;<br>                     <span class="hljs-keyword">final</span> <span class="hljs-type">CircuitBreaker</span> <span class="hljs-variable">breaker</span> <span class="hljs-operator">=</span> e.getValue();<br>                     <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">breakerUsed</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>)(breaker.getUsed() * breaker.getOverhead());<br>                     <span class="hljs-keyword">return</span> e.getKey() + <span class="hljs-string">&quot;=&quot;</span> + breakerUsed + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteSizeValue</span>(breakerUsed);<br>                 &#125;)<br>                     .collect(Collectors.toList())));<br>             message.append(<span class="hljs-string">&quot;]&quot;</span>);<br>         &#125;<br>         <span class="hljs-comment">// derive durability of a tripped parent breaker depending on whether the majority of memory tracked by</span><br>         <span class="hljs-comment">// child circuit breakers is categorized as transient or permanent.</span><br>         CircuitBreaker.<span class="hljs-type">Durability</span> <span class="hljs-variable">durability</span> <span class="hljs-operator">=</span> memoryUsed.transientChildUsage &gt;= memoryUsed.permanentChildUsage ?<br>             CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircuitBreakingException</span>(message.toString(), memoryUsed.totalUsage, parentLimit, durability);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>从代码可以看出，当memoryUsed.totalUsage &gt; parentLimit时，才会出现熔断；parentLimit的值与配置indices.breaker.total.limit（默认值为95%或者70%）有关，它的默认值与indices.breaker.total.use_real_memory（默认值为true）的配置有关，如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Setting&lt;Boolean&gt; USE_REAL_MEMORY_USAGE_SETTING =<br>    Setting.boolSetting(<span class="hljs-string">&quot;indices.breaker.total.use_real_memory&quot;</span>, <span class="hljs-literal">true</span>, Property.NodeScope);<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Setting&lt;ByteSizeValue&gt; TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING =<br>    Setting.memorySizeSetting(<span class="hljs-string">&quot;indices.breaker.total.limit&quot;</span>, settings -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (USE_REAL_MEMORY_USAGE_SETTING.get(settings)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;95%&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;70%&quot;</span>;<br>        &#125;<br>    &#125;, Property.Dynamic, Property.NodeScope);<br></code></pre></td></tr></table></figure><p>我们再来看看memoryUsed.totalUsage的值，它是该类的一个方法计算出来，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> MemoryUsage <span class="hljs-title function_">memoryUsed</span><span class="hljs-params">(<span class="hljs-type">long</span> newBytesReserved)</span> &#123;<br>       <span class="hljs-type">long</span> <span class="hljs-variable">transientUsage</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">long</span> <span class="hljs-variable">permanentUsage</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br> <br>       <span class="hljs-keyword">for</span> (CircuitBreaker breaker : <span class="hljs-built_in">this</span>.breakers.values()) &#123;<br>           <span class="hljs-type">long</span> <span class="hljs-variable">breakerUsed</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>)(breaker.getUsed() * breaker.getOverhead());<br>           <span class="hljs-keyword">if</span> (breaker.getDurability() == CircuitBreaker.Durability.TRANSIENT) &#123;<br>               transientUsage += breakerUsed;<br>           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (breaker.getDurability() == CircuitBreaker.Durability.PERMANENT) &#123;<br>               permanentUsage += breakerUsed;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.trackRealMemoryUsage) &#123;<br>           <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> currentMemoryUsage();<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemoryUsage</span>(current, current + newBytesReserved, transientUsage, permanentUsage);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-type">long</span> <span class="hljs-variable">parentEstimated</span> <span class="hljs-operator">=</span> transientUsage + permanentUsage;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemoryUsage</span>(parentEstimated, parentEstimated, transientUsage, permanentUsage);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>trackRealMemoryUsage的值（取自该配置indices.breaker.total.use_real_memory）决定了是使用实际的内存使用量还是child circuit breakers的内存使用量来判断熔断; 官方解释如下：</p><blockquote><p>Static setting determining whether the parent breaker should take real memory usage into account (<code>true</code>) or only consider the amount that is reserved by child circuit breakers (<code>false</code>). Defaults to <code>true</code></p></blockquote><h4 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h4><p>可以通过修改es节点配置来解决，给es配置文件elasticsearch.yml添加如下配置后重启节点即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">indices.breaker.total.use_real_memory:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>如果还无法解决，可以尝试增加es的jvm内存，修改jvm.options：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 根据实际情况修改内存, 此处分配了40g</span><br><span class="hljs-string">-Xms40g</span><br><span class="hljs-string">-Xmx40g</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>ElasticSearch</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多sheet模板导出表格</title>
    <link href="/2022/07/java-mult-sheet-export.html"/>
    <url>/2022/07/java-mult-sheet-export.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>需求是这样的，需要在页面导出列表表格时同时导出每项的详情数据，而且详情表格并不是一个常规的二维表格，就像图中这样的效果，所以要解决的最主要两个问题就是：多sheet实现、异形表格模板填充。</p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202209200937705.png" alt="汇总"></p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202209200938450.png" alt="详情"></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="1-引入EasyExcel，为了减少代码量，不重复造轮子"><a href="#1-引入EasyExcel，为了减少代码量，不重复造轮子" class="headerlink" title="1.引入EasyExcel，为了减少代码量，不重复造轮子"></a>1.引入EasyExcel，为了减少代码量，不重复造轮子</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-写填充模板"><a href="#2-写填充模板" class="headerlink" title="2.写填充模板"></a>2.写填充模板</h3><ul><li>我导出的表格需要有个汇总表，填充的是集合需要在变量前加点，像这样 {.变量名}</li></ul><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202209200944486.png"></p><ul><li>这是详情表，模板可以根据你想要的来，填充非对象集合就不需要加点，这里要记住你需要生成多sheet的模板索引，这里位置在第二个，索引就是1，后面编码过程会用到</li></ul><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202209200944899.png"></p><h3 id="3-编码"><a href="#3-编码" class="headerlink" title="3.编码"></a>3.编码</h3><p><strong>3.1 生成多sheet名-数据对象键值对</strong></p><ul><li>根据你的业务需求，我们可以提前把模板生成好，再去填充数据，excel中不能出现重复的sheet名，我们要把重命名的sheet名和数据对应上，我们可以创建一个HashMap去存放sheet名和数据对，这是我的代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这是我想要的数据集合</span><br>List&lt;Student&gt; list = taskList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(idList));<br><br><span class="hljs-comment">//sheet名-数据对象</span><br>Map&lt;String, Student&gt; sheetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Student student : list) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sheetName</span> <span class="hljs-operator">=</span> student.getName() + <span class="hljs-string">&quot;--表格&quot;</span>;<br>    <span class="hljs-comment">//防止重名</span><br>    putIfContainsKey(sheetMap, sheetName, student);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>我这里的sheet名是有可能会重复的，所以这里的put自己写了递归去重命名，putIfContainsKey方法如下，遇到重复的sheet直接递归在sheet名后加（1）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putIfContainsKey</span><span class="hljs-params">(Map sheetMap, String sheetName, Object data)</span> &#123;<br>    <span class="hljs-keyword">if</span>(sheetMap.containsKey(sheetName))&#123;<br>        putIfContainsKey(sheetMap, sheetName + <span class="hljs-string">&quot;(1)&quot;</span>, data);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        sheetMap.put(sheetName, data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.2 生成多sheet模板</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取模板输入流</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\template.xlsx&quot;</span>);<br><span class="hljs-comment">//这里就是模板的sheet索引</span><br><span class="hljs-type">int</span> <span class="hljs-variable">cloneIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">//通过poi创建表对象</span><br><span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(inputStream);<br><span class="hljs-comment">//遍历复制sheet</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Student&gt; entry : sheetMap.entrySet()) &#123;<br>    <span class="hljs-comment">//给复制的sheet命名,这里取的就是map中的key</span><br>workbook.cloneSheet(cloneIndex, entry.getKey());<br>&#125;<br><br><span class="hljs-comment">//移除原始模板sheet</span><br>workbook.removeSheetAt(cloneIndex);<br><span class="hljs-comment">//写到流</span><br>workbook.write(bos);<br></code></pre></td></tr></table></figure><p><strong>3.3 通过EasyExcel导出表格</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输出文件名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\out.xlsx&quot;</span>;<br><span class="hljs-comment">//创建模板输入流</span><br><span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br><span class="hljs-comment">//构造表格</span><br><span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(filename).withTemplate(is).build();<br><span class="hljs-comment">//填充配置, 这里的意义是给模板中的集合数据添加新行, 保证导出不会错乱</span><br><span class="hljs-type">FillConfig</span> <span class="hljs-variable">fillConfig</span> <span class="hljs-operator">=</span> FillConfig.builder().forceNewRow(Boolean.TRUE).build();<br><br><span class="hljs-comment">//填充汇总数据</span><br><span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;汇总&quot;</span>).build();<br>excelWriter.fill(list, fillConfig, writeSheet);<br><span class="hljs-comment">//遍历填充详情数据</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Student&gt; entry : sheetMap.entrySet()) &#123;<br><span class="hljs-comment">//获取sheet</span><br>    <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(entry.getKey()).build();<br>    <span class="hljs-comment">//填充对象数据 直接放对象即可</span><br>    excelWriter.fill(entry.getValue(), fillConfig, writeSheet);<br>    <span class="hljs-comment">//填充集合数据 需要放集合</span><br>List&lt;StudentDetail&gt; detailList = entry.getValue().getDetailList();<br>    excelWriter.fill(list, fillConfig, writeSheet);<br>&#125;<br><span class="hljs-comment">//关流</span><br>excelWriter.finish();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>EasyExcel</tag>
      
      <tag>POI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows11安卓子系统添加代理教程</title>
    <link href="/2022/06/win11-aws-proxy.html"/>
    <url>/2022/06/win11-aws-proxy.html</url>
    
    <content type="html"><![CDATA[<h4 id="1-打开WSA，然后打开命令行，用adb连接安卓子系统"><a href="#1-打开WSA，然后打开命令行，用adb连接安卓子系统" class="headerlink" title="1.打开WSA，然后打开命令行，用adb连接安卓子系统"></a>1.打开WSA，然后打开命令行，用adb连接安卓子系统</h4><ul><li>若找不到adb命令，需要把adb配置到环境变量，或者直接在adb.exe所在目录下执行</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">adb connect <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">58526</span><br></code></pre></td></tr></table></figure><h4 id="2-设置全局代理，ip地址为本机内网ip，端口为http代理端口"><a href="#2-设置全局代理，ip地址为本机内网ip，端口为http代理端口" class="headerlink" title="2.设置全局代理，ip地址为本机内网ip，端口为http代理端口"></a>2.设置全局代理，ip地址为本机内网ip，端口为http代理端口</h4><ul><li>ip地址可通过<code>ipconfig</code>获取</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">adb shell settings put global http_proxy ip地址:端口<br></code></pre></td></tr></table></figure><h4 id="3-检验是否代理成功"><a href="#3-检验是否代理成功" class="headerlink" title="3.检验是否代理成功"></a>3.检验是否代理成功</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">adb shell settings get global http_proxy <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows11</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>WSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器迁移教程</title>
    <link href="/2022/06/docker-container-move.html"/>
    <url>/2022/06/docker-container-move.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>被领导要求部署一个和测试环境一样的演示环境，并且数据库也要同步过去，服务器上的各种服务都是docker部署的，由于之前docker玩的比较少，所以还是踩了不少坑的，在此记录一下正确的操作方法。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-容器镜像导出"><a href="#1-容器镜像导出" class="headerlink" title="1.容器镜像导出"></a>1.容器镜像导出</h3><ul><li>我们先通过<code>docker images</code>查看需要导出的镜像</li></ul><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206171124984.png" alt="镜像列表"></p><ul><li>然后我们使用镜像导出命令</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker save -o <span class="hljs-regexp">/home/</span>备份包名.tar 镜像id或镜像名<br><br>-o(即output) 或 &gt; 表示输出到文件<br>备份镜像可以同时备份多个，空格分隔，这里建议使用镜像名备份，否则还原时会丢失镜像名<br></code></pre></td></tr></table></figure><ul><li>例如我需要备份nginx镜像：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save -o /home/backup/back.tar nginx<br></code></pre></td></tr></table></figure><p><strong>备份完成之后可以在目录下查看到这个备份文件</strong></p><h3 id="2-备份文件迁移"><a href="#2-备份文件迁移" class="headerlink" title="2.备份文件迁移"></a>2.备份文件迁移</h3><ul><li>迁移文件可以使用u盘传输，当然用u盘转移时间显然很慢，我们何不直接在两台服务器之间进行传输？如果再局域网的情况下传输速度会非常快，这里我们使用scp指令去复制备份文件：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">scp <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[原路径]</span> <span class="hljs-selector-attr">[目标路径]</span><br><br>命令参数：<br>-<span class="hljs-selector-tag">p</span> 保留原文件的修改时间，访问时间和访问权限<br>-<span class="hljs-selector-tag">q</span> 不显示传输进度条<br>-r 递归复制整个目录。<br>-v 详细方式显示输出。<br>-<span class="hljs-selector-tag">P</span> port 注意是大写的<span class="hljs-selector-tag">P</span>, port是指定数据传输用到的端口号<br></code></pre></td></tr></table></figure><ul><li>在我们需要迁移的目标机器上执行指令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#192.168.1.79是我们备份文件所在的服务器，我想把文件移动到本地home下</span><br>scp root@192.168.1.79:/home/back.tar /home/<br></code></pre></td></tr></table></figure><ul><li>回车之后会提示是否输入密码，先yes然后输入密码，输入一下root密码即可，如果你是非root用户，可能要注意下文件权限问题</li></ul><h3 id="3-镜像备份文件读取"><a href="#3-镜像备份文件读取" class="headerlink" title="3.镜像备份文件读取"></a>3.镜像备份文件读取</h3><ul><li>使用docker load载入镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i /home/back.tar<br><span class="hljs-comment">#-i(即input)或&lt;表示从文件输入；</span><br></code></pre></td></tr></table></figure><ul><li>等待读条完毕，使用<code>docker images</code>查看是否导入成功，导入成功即可根据镜像创建容器并运行。</li></ul><h3 id="4-容器挂载目录的转移和配置"><a href="#4-容器挂载目录的转移和配置" class="headerlink" title="4.容器挂载目录的转移和配置"></a>4.容器挂载目录的转移和配置</h3><h4 id="4-1-方案1"><a href="#4-1-方案1" class="headerlink" title="4.1 方案1"></a>4.1 方案1</h4><ul><li>如果在原服务器的容器中配置了挂载目录，可以用第2步的方法，将挂载目录转移至新服务器。</li><li>可以使用以下命令查看挂载目录的映射关系</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker inspect 369a1376f78c | grep Mounts -A 50<br><span class="hljs-comment">#369a1376f78c为容器名称或id 该命令标识获取Mounts关键词后50行</span><br></code></pre></td></tr></table></figure><ul><li>我们查看输出的Mounts数组中的挂载信息，我们可以在此查看挂载的目录和对应容器目录</li></ul><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206171440713.png" alt="image-20220617144032262"></p><ul><li>在新服务器上启动容器时可以根据挂载信息添加-v参数，</li></ul><h4 id="4-2-方案2（推荐）"><a href="#4-2-方案2（推荐）" class="headerlink" title="4.2 方案2（推荐）"></a>4.2 方案2（推荐）</h4><ul><li><p>如果觉得重新写启动命令很麻烦，可以使用runlike把容器启动命令直接复制过去，方法如下</p><ul><li>安装pip工具包和runlike</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#安装pip3</span><br>yum install python3<br>yum install python3-pip<br><span class="hljs-comment">#安装runlike</span><br>pip3 install runlike<br></code></pre></td></tr></table></figure><ul><li>使用该命令即可查看启动命令，非常方便</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">runlike -p 容器名<br></code></pre></td></tr></table></figure></li></ul><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_37992410/article/details/120286324">docker导入导出镜像、容器，及启动容器失败解决方法</a></p><p><a href="https://www.yuntue.com/post/38484.html">Linux服务器：服务器之间，实现局域网(内网)快速传输文件 - 云服务器网 (yuntue.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/394042562">pip3 install runlike - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows V2rayN直连or代理规则配置教程</title>
    <link href="/2022/06/win-v2ray-direct-proxy-config.html"/>
    <url>/2022/06/win-v2ray-direct-proxy-config.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>V2rayN 在更新以后移除了 PAC 规则模式，很多人被迫要么使用全局代理要么关闭代理，但其实规则模式只是通过另外一种方式呈现在了 V2rayN 里。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="1-打开V2rayN面板，找到设置–路由设置"><a href="#1-打开V2rayN面板，找到设置–路由设置" class="headerlink" title="1.打开V2rayN面板，找到设置–路由设置"></a>1.打开V2rayN面板，找到设置–路由设置</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161041896.png"></p><h3 id="2-添加代理-x2F-直连-x2F-组织的域名"><a href="#2-添加代理-x2F-直连-x2F-组织的域名" class="headerlink" title="2.添加代理&#x2F;直连&#x2F;组织的域名"></a>2.添加代理&#x2F;直连&#x2F;组织的域名</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161046462.png"></p><h4 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则:"></a>配置规则:</h4><blockquote><p><strong>建议先添加 geoip:cn 和 geosite:cn，然后再以 domain:xxx.com 的形式添加特别网站。</strong><br><strong>(添加完 geoip:cn 和 geosite:cn 以后基本上所有中国大陆的网站都会直连)</strong><br><strong>geosite:category-ads：包含了常见的广告域名。</strong><br><strong>geosite:category-ads-all：包含了常见的广告域名，以及广告提供商的域名。</strong><br><strong>geoip:apple：包含了 Apple 旗下绝大部分域名。</strong><br><strong>geoip:google：包含了 Google 旗下绝大部分域名。</strong><br><strong>geoip:microsoft：包含了 Microsoft 旗下绝大部分域名。</strong><br><strong>geoip:facebook：包含了 Facebook 旗下绝大部分域名。</strong><br><strong>geoip:twitter：包含了 Twitter 旗下绝大部分域名。</strong><br><strong>geoip:telegram：包含了 Telegram 旗下绝大部分域名。</strong></p></blockquote><ul><li>如果你使用的局域网屏蔽了一些你想上的网站，你也可以使用这个功能解除限制，当然需要把想上的网站配置进代理配置中</li></ul><h3 id="3-如果你启用了路由高级功能，想要配置不同模式下的代理规则，也是可以的，如果你不使用高级功能，可以跳过这一步"><a href="#3-如果你启用了路由高级功能，想要配置不同模式下的代理规则，也是可以的，如果你不使用高级功能，可以跳过这一步" class="headerlink" title="3.如果你启用了路由高级功能，想要配置不同模式下的代理规则，也是可以的，如果你不使用高级功能，可以跳过这一步"></a>3.如果你启用了路由高级功能，想要配置不同模式下的代理规则，也是可以的，如果你不使用高级功能，可以跳过这一步</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161054968.png"></p><p><strong>每一项代表一个规则集，你可以右击新建规则集去定制化，双击规则集配置规则:</strong></p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161056889.png"></p><p><strong>proxy代表代理，direct代表直连，block代表阻止</strong></p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161057110.png" alt="因为公司内网屏蔽额这些站点（恼），我就让这些站点走了代理"></p><p><strong>配置完只需要一路确定，然后在托盘菜单的路由中选择自己定制化的规则集即可</strong></p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161101779.png"></p><h3 id="4-检查是否生效"><a href="#4-检查是否生效" class="headerlink" title="4.检查是否生效"></a>4.检查是否生效</h3><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/202206161102614.png"></p><p><strong>查看日志，会发现有些域名代理了，有些域名屏蔽了，有些域名直连了，那就是设置成功了。</strong></p><p>参考文章：</p><p><a href="https://hasefukashi.in/v2rayrule/">Windows V2rayN 如何设置 直连or代理 规则？ - Hase測評 (hasefukashi.in)</a></p>]]></content>
    
    
    <categories>
      
      <category>VPN技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>v2rayN</tag>
      
      <tag>v2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器时间不同步导致在java应用中获取的时间不正确问题</title>
    <link href="/2022/06/docker-time-java-app.html"/>
    <url>/2022/06/docker-time-java-app.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在把Java应用部署到docker容器时，发现应用获取到的时间和现实时间相差了8个小时，会导致一系列不必要的麻烦。</p><h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><h4 id="1、首选需要确保宿主机的时区和时间的准确"><a href="#1、首选需要确保宿主机的时区和时间的准确" class="headerlink" title="1、首选需要确保宿主机的时区和时间的准确"></a>1、首选需要确保宿主机的时区和时间的准确</h4><p>在宿主机上用 date -R 看一下时区是否为东八区（末尾有+0800）</p><p><img src="https://aunero-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220610112000077.png"></p><h4 id="2、若宿主机时区或者时间不准确，可以用date-x2F-ntpdate和tzdata同步一下时间以及更改时区"><a href="#2、若宿主机时区或者时间不准确，可以用date-x2F-ntpdate和tzdata同步一下时间以及更改时区" class="headerlink" title="2、若宿主机时区或者时间不准确，可以用date&#x2F;ntpdate和tzdata同步一下时间以及更改时区"></a>2、若宿主机时区或者时间不准确，可以用date&#x2F;ntpdate和tzdata同步一下时间以及更改时区</h4><h5 id="date命令："><a href="#date命令：" class="headerlink" title="date命令："></a>date命令：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">date                #查看当前时间，结果如下：2017年 01月 06日 星期五 13:02:55 CST<br>date -s 14:03:35#设置当前时间，结果如下：2017年 01月 06日 星期五 14:03:35 CST<br>date -s 2017-01-08    #设置当前日期，结果如下：2017年 01月 08日 星期五 00:00:00  CST<br></code></pre></td></tr></table></figure><h5 id="ntpdate命令："><a href="#ntpdate命令：" class="headerlink" title="ntpdate命令："></a>ntpdate命令：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ntpdate -u 210.72.145.44   #网络时间同步命令<br></code></pre></td></tr></table></figure><blockquote><p>注意：若不加上-u参数， 会出现以下提示：no server suitable for synchronization found</p><p>-u：从man ntpdate中可以看出-u参数可以越过防火墙与主机同步；</p><p>210.72.145.44：中国国家授时中心的官方服务器。</p></blockquote><h5 id="ntp常用服务器："><a href="#ntp常用服务器：" class="headerlink" title="ntp常用服务器："></a>ntp常用服务器：</h5><p>中国国家授时中心：210.72.145.44</p><p>NTP服务器(上海) ：ntp.api.bz</p><p>经测试中国国家授时中心与NTP上海服务器可以正常同步时间，注意需要加上-u参数！</p><h5 id="时区修改："><a href="#时区修改：" class="headerlink" title="时区修改："></a>时区修改：</h5><p>使用tzselect， 选择到China&#x2F;Shanghai即可</p><p>若显示未安装tzselect，可以安装一下tzdata</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install tzdata #centos<br>apt-get install tzdata #ubuntu<br></code></pre></td></tr></table></figure><h4 id="3、复制宿主机上的zoneinfo文件夹到容器下的-x2F-usr-x2F-share-x2F-目录下。"><a href="#3、复制宿主机上的zoneinfo文件夹到容器下的-x2F-usr-x2F-share-x2F-目录下。" class="headerlink" title="3、复制宿主机上的zoneinfo文件夹到容器下的&#x2F;usr&#x2F;share&#x2F;目录下。"></a>3、复制宿主机上的zoneinfo文件夹到容器下的&#x2F;usr&#x2F;share&#x2F;目录下。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp /usr/share/zoneinfo 容器名称:/usr/share/<br></code></pre></td></tr></table></figure><h4 id="2、进入到容器中"><a href="#2、进入到容器中" class="headerlink" title="2、进入到容器中"></a>2、进入到容器中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it --user=root 容器名称 /bin/bash<br></code></pre></td></tr></table></figure><h4 id="3、创建软连接，修改时区。"><a href="#3、创建软连接，修改时区。" class="headerlink" title="3、创建软连接，修改时区。"></a>3、创建软连接，修改时区。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone<br></code></pre></td></tr></table></figure><h4 id="4、查看时间，进行测试。"><a href="#4、查看时间，进行测试。" class="headerlink" title="4、查看时间，进行测试。"></a>4、查看时间，进行测试。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -R<br></code></pre></td></tr></table></figure><ul><li>若容器中有服务，需要重启容器，服务获取的时间才会正确。</li></ul><p>参考文章:</p><p><a href="https://www.linuxprobe.com/linux-time.html">如何调整Linux系统为正确时区 | 《Linux就该这么学》 (linuxprobe.com)</a></p><p><a href="https://www.csdn.net/tags/MtzaIgwsOTY2ODQtYmxvZwO0O0OO0O0O.html">linux中同步时间的命令是什么 - CSDN</a></p><p><a href="https://blog.csdn.net/tiny_du/article/details/124024562">修改docker的时间_在路上的阿帅的博客-CSDN博客_docker 修改时间</a></p>]]></content>
    
    
    <categories>
      
      <category>Java开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sspanel+XrayR后端+tls+nginx反代(含一键脚本) 对接教程</title>
    <link href="/2022/05/sspanel-xrayr-tls-nginx-proxy.html"/>
    <url>/2022/05/sspanel-xrayr-tls-nginx-proxy.html</url>
    
    <content type="html"><![CDATA[<h2 id="后端信息"><a href="#后端信息" class="headerlink" title="后端信息"></a>后端信息</h2><p>XrayR后端说明：<a href="https://crackair.gitbook.io/xrayr-project/">https://crackair.gitbook.io/xrayr-project/</a></p><p>XrayR原作者已经删库了, 这是后续开发的脚本</p><p><a href="https://github.com/XrayR-project/XrayR">https://github.com/XrayR-project/XrayR</a></p><h2 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h2><p>节点地址：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">IP;监听端口;alterId;(tcp或ws);(tls或不填);path=/xxx|<span class="hljs-type">host</span>=xxxx.com|<span class="hljs-type">server</span>=xxx.com|<span class="hljs-type">outside_port</span>=xxx<br></code></pre></td></tr></table></figure><p>类型：V2Ray</p><h2 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h2><ul><li>安装后端脚本：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -N https://raw.githubusercontent.com/XrayR-project/XrayR-release/master/install.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure><ul><li>时间同步 (VMess协议对时间同步有要求, 如果用VLESS可以跳过)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y ntp<br>systemctl enable ntpd<br>ntpdate -q 0.rhel.pool.ntp.org<br>systemctl restart ntpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改时区:</span><br>TZ=&#x27;Asia/Shanghai&#x27;;export TZ<br></code></pre></td></tr></table></figure><ul><li>配置文件 &#x2F;etc&#x2F;XrayR&#x2F;config.yml, 以下为部分修改项</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Nodes:</span><br>  <span class="hljs-bullet">-</span><br>    <span class="hljs-attr">PanelType:</span> <span class="hljs-string">&quot;SSpanel&quot;</span> <span class="hljs-comment"># 面板类型: SSpanel, V2board, PMpanel, Proxypanel</span><br>    <span class="hljs-attr">ApiConfig:</span><br>      <span class="hljs-attr">ApiHost:</span> <span class="hljs-string">&quot;https://xxx.com&quot;</span>  <span class="hljs-comment">#api地址 机场地址</span><br>      <span class="hljs-attr">ApiKey:</span> <span class="hljs-string">&quot;123123&quot;</span><span class="hljs-comment">#apikey 在你网站的config里配置过的</span><br>      <span class="hljs-attr">NodeID:</span> <span class="hljs-number">15</span><span class="hljs-comment">#节点id</span><br>    <span class="hljs-attr">ControllerConfig:</span><br>      <span class="hljs-attr">CertConfig:</span><br>        <span class="hljs-attr">CertMode:</span> <span class="hljs-string">none</span> <span class="hljs-comment">#反代直接关闭 交给后面的脚本申请证书</span><br></code></pre></td></tr></table></figure><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出当前配置文件内容</span><br>xrayr config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动xrayr</span><br>xrayr start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指令向导</span><br>xrayr<br></code></pre></td></tr></table></figure><h2 id="BBR加速"><a href="#BBR加速" class="headerlink" title="BBR加速"></a>BBR加速</h2><p>centos bbr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">功能比较强大</span><br>bash &lt;(curl -Lso- https://git.io/kernel.sh)<br></code></pre></td></tr></table></figure><h2 id="配置反代"><a href="#配置反代" class="headerlink" title="配置反代"></a>配置反代</h2><p>使用前先将域名解析到后端节点ip地址</p><p>一键脚本，按照提示操作即可，脚本跑完会给出前端节点配置信息，需要去节点配置改一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash &lt;(curl -sL https://raw.githubusercontent.com/Aunero/XrayR-nginx-proxypass/master/install.sh)<br></code></pre></td></tr></table></figure><p>部署完成之后记得也要开放一下防火墙你设置的监听端口，或者直接关闭防火墙，否则节点可能会连不上，可以参考这篇文章：<a href="https://aunero.top/2022/08/Linux-firewall-cmd.html">Linux防火墙常用命令 - Aunero’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>VPN技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>v2ray</tag>
      
      <tag>sspanel</tag>
      
      <tag>XrayR</tag>
      
      <tag>nginx</tag>
      
      <tag>反向代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux自动重启配置教程</title>
    <link href="/2022/05/linux-auto-reboot.html"/>
    <url>/2022/05/linux-auto-reboot.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将时区改成中国</span><br><br>crontab -e <br><br>30 4 * * * /sbin/reboot          <br><span class="hljs-meta prompt_"># </span><span class="language-bash">( 0 1 * * *表示每天凌晨4.30重启.)</span><br><br>0 1 * * 1 /sbin/reboot          <br><span class="hljs-meta prompt_"> # </span><span class="language-bash">(0 1 * * 1表示每周一凌晨一点重启</span><br><br>30 2 * * * /home/bin/oraclebackup.sh   <br><span class="hljs-meta prompt_">#</span><span class="language-bash">（备份数据库和站点目录）</span><br><br>30 3 * * * /home/bin/cmsbackup.sh     <br><span class="hljs-meta prompt_">#</span><span class="language-bash">（备份数据库和站点目录）</span><br><br>crontab -l <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看目前已有的定时任务</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启cron生效</span><br>service crond restart <br><br>/etc/init.d/crond start #启动<br>/etc/init.d/crond stop #关闭<br>/etc/init.d/crond restart #重启<br><span class="hljs-meta prompt_"># </span><span class="language-bash">有的系统可能init.d目录下没有crond，只有cron，其实也一样，只不过把crond换为cron：</span><br>/etc/init.d/cron start  #启动<br>/etc/init.d/cron stop #关闭<br>/etc/init.d/cron restart #重启<br><br>who -b #查看最后一次系统启动的时间。<br><br>who -r #查看当前系统运行时间<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>cron表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
